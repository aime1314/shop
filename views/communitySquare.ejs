<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <title><%= title%></title>
    <meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no">
    <meta name="format-detection"  content="telephone=yes">
    <meta  http-equiv="x-rim-auto-match" content="none">
    <script src="/javascripts/vue.min.js"></script>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <link rel='stylesheet' href='/stylesheets/chatRoomStyle.css' />
    <script src='https://res2.wx.qq.com/open/js/jweixin-1.4.0.js'></script>
    <script src="/javascripts/axios.min.js"></script>
    <script src="/javascripts/jquery.min.js"></script>
</head>
<body>
    <div class="content">
        <% if(information.isOpenMsgSquare){%>
         <div id="app" style="display:none" v-show="isAppShow">
            <div class="friend_window" ref="friend_window" @click="closeRuanpan"  @touchmove="closeRuanpan">
                <!-- @click="closeRuanpan"  @touchmove="closeRuanpan" -->
                <aside>
                    <main  ref="firend"  > 
                        <!-- :style="{overflowY:messageScroll? 'auto' : 'hidden',paddingRight: messageScroll ? '0': '2px' }" -->
                        <!-- v-if="showDatas&&showDatas.length" -->
                        <!-- //游客和有设备号时不显示 -->
                        <div class="reward_maili" @click="rewardMali()"  v-if="isNormalUser&&!selfObj.deviceUuid"> 
                            <img src="/images/jiangli.png" alt="奖励脉粒" />
                        </div>
                        <div style="text-align:center;color:#0000ff;font-size:14px" v-show="isLoad"><span>查看更多</span></div>
                        <div v-if="showDatas&&showDatas.length"  > 
                            <!-- @click="closeRuanpan" -->
                            <div id="chatRecord" class="message_main" ref="chatMsg"  @mouseenter="showMessageScrolls"   @mouseleave="hideMessageScrolls"  @touchmove="closeRuanpan">
                                <div v-for="(item,index) in showDatas">
                                    <div class="mes_times" v-if="item.isShowTime"><span>{{item.sendTimeFomat}}</span></div>
                                    <div class="mes_box"  :class="{'me' : item.senderUserId == selfObj.chatMemberId}" :key='index' :ref="'sortMenu_'+index">
                                        <div class="avatar">
                                            <img :src="item.content.user.imageUrl" alt="头像" v-if="item.content.user&&item.content.user.imageUrl&&item.content.user.imageUrl!=''">
                                            <!-- item.content.user!=null&&item.content.user&&item.content.user.imgName&&item.content.user.memberSource !='undefined'&&item.content.user.memberSource==0||item.content.user.memberSource==1" -->
                                            <span v-else-if="item.content.user!=null&&item.content.user.memberSource==1||0&&item.content.user.imgName" class="imgName">{{item.content.user.imgName}}</span>
                                            <img  v-else src="/images/touristsHead.png" alt="">
                                            <!-- v-if="item.messageType != 'GroupNotificationMessage'" -->
                                        </div>
                                        <div :class="{'cont' : item.messageType != 'GroupNotificationMessage'}" class="cont_all">
                                            <div style="margin-bottom:6px" v-if="item.senderUserId != selfObj.chatMemberId">
                                                <span  style="font-family:Noto Sans S Chinese;font-weight:400;color:rgba(136,143,156,1);font-size: 0.2rem;" v-if="item.content.user&&item.content.user.chatName">
                                                    <!-- 天天 -->
                                                     {{item.content.user.chatName}}
                                                </span>
                                            </div>
                                            <div v-if="item.messageType == 'TextMessage'"  :class="{'message_box' : item.messageType == 'TextMessage'}" @mousedown="msgBoxEnter($event,item.index,index)" @mouseleave="msgBoxLeave()" :id="'msg_'+index">
                                                <span v-if="item.messageType == 'TextMessage'"  v-html='item.content.content'>
                                                        {{item.content.content}}
                                                    <!-- <span v-else>
                                                        {{item.content.content}}
                                                    </span> -->
                                                    <!-- :id="'msg_'+index+'_'+item.index+'_sp'" -->
                                                    </span>
                                            </div>
                                            <div class="" 
                                                v-else-if="item.messageType == 'ImageMessage'"
                                                @click="msgBoxImg($event,item.index,index)"
                                                :id="'msg_'+index+'_'+item.index" >
                                                <span  class="imgMsg" style="background:#fff">
                                                    <img :src="'data:image/png;base64,'+item.content.content" >
                                                </span>
                                                    
                                            </div>
                                            <div v-else-if="item.messageType == 'GIFMessage'&&item.objectName=='RC:GIFMsg'"
                                            :id="'msg_'+index+'_'+item.index"
                                            @mousedown="msgBoxImg($event,item.index,index)" >
                                                <span  class="imgMsg" style="background:#fff">
                                                    <img :src="item.content.remoteUrl" >
                                                </span>
                                            </div>
                                            <div v-else-if="item.messageType == 'VoiceMessage'">
                                                <div v-if="item.senderUserId == selfObj.chatMemberId">
                                                    <!-- @click="handlePlay(index,item.content.content)" -->
                                                    <!--  -->
                                                    <div style="display:none">
                                                        <audio controls="controls" ref="audio" preload="auto" :src="item.content.content">
                                                            <!-- <source :src="item.content.content " > -->
                                                            <!-- type="audio/mpeg" -->
                                                        </audio>
                                                    </div>
                                                    <div class="voice-bg "
                                                        @click="handlePlay(index,item.content.duration,item.index)" >
                                                        <span style="margin-right: 0.2rem;color: #507fb7">{{ item.content.duration || 0 }}"</span>
                                                        <img :src="item.VoiceImg" />
                                                    </div>
                                                </div>
                                                <div v-else>
                                                    <div style="display:none">
                                                        <audio controls="controls" ref="audio" preload="auto" :src="item.content.content">
                                                            <!-- <source :src="item.content.content " > -->
                                                        </audio>
                                                    </div>
                                                    <div class="voice-bg bg"  @click="handlePlay(index,item.content.duration,item.index)">
                                                        <img :src="item.VoiceImg" />
                                                        <span style="margin-left: 0.2rem;color:#939393 ;">{{ item.content.duration || 0 }}"</span>
                                                    </div>
                                                </div>
                                            </div>
                                            <div v-else-if="item.messageType == 'RichContentMessage' ">
                                                <span>
                                                    图文消息,暂无处理
                                                </span>
                                            </div>
                                            <div v-else-if="item.messageType == 'FileMessage'">
                                            
                                                    文件消息,暂无处理
                                            </div>
                                            <span v-else-if="item.messageType == 'LocationMessage' ">
                                                位置消息,暂无处理
                                            </span>
                                            <span v-else-if="item.messageType == 'SightMessage' ">
                                                小视频消息,渲染一个视频播放器(base64),暂无处理
                                            </span>
                                            <span v-else-if="item.messageType == 'CombineMessage' ">
                                                合并转发消息,暂无处理
                                            </span>
                                            <span v-else-if="item.messageType == 'PublicServiceRichContentMessage' ">
                                                公众服务单图文消息,暂无处理
                                            </span>
                                            <span v-else-if="item.messageType == 'PublicServiceMultiRichContentMessage' ">
                                                公众服务 多图文消息,暂无处理
                                            </span>
                                            <span v-else-if="item.messageType == 'ContactNotificationMessage' ">
                                                加好友通知消息,暂无处理
                                            </span>
                                            <span v-else-if="item.messageType == 'InformationNotificationMessage' ">
                                                加好友通知消息,暂无处理
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </main>
                </aside>
            </div>
            <div class="passwordMali" v-show="isShowPop" style="display:none" >
                <div class="centerCon">
                    <div style="height:1.21rem">
                        <p v-if="showMali">脉粒领取口令已复制，下载群脉APP并登录后立即到账。不要耽搁哦，否则口令可能会失效哦~</p>
                    </div>
                    <div v-if="showMali">
                        <span @click="closeConfirm()">再看看</span>
                        <span @click="onDownload()">下载群脉APP</span>
                    </div>
                </div>
            </div>
            <div class="passwordMali" v-show="showImg" @click="showImg=false" style="background: #000;">
                <!-- <div class="swiper-zoom-container" v-for="(item,index) in imgList" :key="index" :ref="'img_'+index">
                    <img :src="item.imageUri" alt="" style="max-width: 350px;max-height: 700px;" :height="item.height*3" :width="item.width*3" />
               </div> -->
               <div class="swiper-zoom-container" >
                   <img :src="showImageUri.imageUri" alt="" style="position: absolute;top: 50%;left: 50%;
                   transform: translate(-50%, -50%);z-index: 1000;"  :width="showImageUri.clientW" />
               </div> 
                <!-- <swiper :options="swiperOption" ref="imgOverview" style="height:100%;text-align: center;"></swiper> -->
                    <!-- position: absolute;top: 50%;left: 50%;transform: translate(-50%, -50%); -->
                    <!-- <swiper-slide v-for="item in imgList"  >
                      <div class="swiper-zoom-container" >
                            <img :src="item.imageUri" alt="" style="max-width: 350px;max-height: 700px;" :height="item.height*3" :width="item.width*3" />
                      </div>
                    </swiper-slide> -->
                   
                <!-- style="position: absolute;top: 50%;left: 50%;transform: translate(-50%, -50%);" width="95%" height="95%" -->
            </div>
                 <div class="input_box" :class="{'location':isChangeInput==true}" ref="inputBox">
                    <!-- <form action="#">  -->
                    <div>
                        <!-- @mousedown="event.preventDefault()" -->
                        <img v-if="isBiaoqing" src="/images/biaoqing.png"  @click="emojiListFun"  />
                        <img v-else src="/images/jianpan.png"  @click="ruanjianClick"  @mousedown="event.preventDefault()"/>
                        <!-- @keydown="sendTextMsg($event)" -->
                        <!-- style="-webkit-user-select: auto" -->
                        <!-- @mousedown="sendMsgEnter($event)" -->
                        <div class="input"  id="input" ref="input" contenteditable="true"  tabindex="1" @change="inputMsg" @input="inputMsg" @blur="changeBlur" @foucs="foucsPre"  @click="biaoQingBao=false" style=" -webkit-user-select: text;"></div>
                        <!-- </form> -->
                        <p class="sendBtn" @click="sendTextMsg()" @mousedown="event.preventDefault()" @click="biaoQingBao=false">发送</p>
                    </div>
                    <div v-show="biaoQingBao"  @click.stop="biaoQingBao=true" class="biaoqing" style="width: 100%;height: auto;background: #f8f8f8;">
                        <ul style="margin:0.2rem;width: 95%;height: 4rem;overflow-y: auto;">
                            <li v-for="(item,index) in emojiList"
                              :key="index"
                               @click="changeFace(item)"
                                class="faceList">
                                 {{item.emoji}}
                         </li>
                        </ul>
                    </div>
                    <!-- <div style="height: 6rem;" v-if="isShowDiv">

                    </div> -->
                </div>
            </div>
            <% }else{ %>
            <div class="pageColsed">
                <header class="header">
                    <p>
                        <img src="/images/pageClosed.png" alt="联系管理员打开此功能">
                    </p>
                    <p>真不巧，您访问的社群广场已关闭~</p>
                </header>
                <footer class="footer">
                    <div>
                        <p class="enterOrgan" onclick="enterOrgan()">进入社群主页</p>
                    </div>
                </footer>
            </div>
            <% } %>
            <div class="passwordMali tele"  style="display:none">
                <div class="centerCon">
                    <div style="height:1rem">
                        <p  style="margin: 0.36rem auto;">
                            <span ><a href="" style="color: #5671BE;" id="tele_a"></a></span>
                            <span>可能是一个电话号码，是否立即拨打？</span>
                        </p>
                    </div>
                    <div>
                        <span onclick="closeConfirm()">取消</span>
                        <span><a href="" style="color: #5671BE;">立即拨打</a></span>
                    </div>
                </div>
            </div>
    </div>
    <script>
        function enterOrgan(){
                var organId = `<%= information.organizationId %>`
                var url = location.search; 
                //获取url中"?"符后的字串 
                    var theRequest = new Object();
                    if (url.indexOf("?") != -1) {
                        var str = url.substr(1);
                        strs = str.split("&");
                        for (var i = 0; i < strs.length; i++) {
                            // theRequest[strs[i].split("=")[0]]=unescape(strs[i].split("=")[1]); 
                            theRequest[strs[i].split("=")[0]] = strs[i].split("=")[1];
                        }
                    }
                window.location.href = "/share/organPage?organId="+organId;
        }
      
        // console.log('<%= information.organizationImg %>');
        var wxWebshareDb = {
            "title": '我在<%= title %>,快加入我们吧！', // 分享标题
            "link": window.location.href, // 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致
            "desc": "玩社群，用群脉！上qunmai.com找人脉！", // 分享描述
            "imgUrl": '<%= information.organizationImg %>', //分享图标
            // "type": '',                                        // 分享类型,music、video或link，不填默认为link
            // "dataUrl": ''                                    // 如果type是music或video，则要提供数据链接，默认为空
        };
    </script>
        <script src="/javascripts/webcommon.js"></script>
        <script src="/javascripts/wxcommon.js"></script>
        <script src="/javascripts/RongIMLib-2.5.1.js"></script>
        <!-- <script src="/javascripts/RongIMLib-2.5.5.min.js"></script> -->
        <script src="/javascripts/protobuf-2.3.6.min.js"></script>
        <script src="/javascripts/qiniu.js"></script>
        <script src="/javascripts/upload.js"></script>
        <!-- <script src="/javascripts/RongEmo.js"></script> -->
        <script src="/javascripts/init.js"></script>
        <!-- 压缩版 -->
        
        <!-- <script src="https://cdn.ronghub.com/RongEmoji-2.2.7.min.js"></script> -->
        <script src="/javascripts/emo.js"></script>
        <script src="/javascripts/amr.js"></script>
<!--        <script src="/javascripts/Libamr-2.2.5.min.js"></script>-->
        <script src="/javascripts/RongIMVoice-2.2.6.js"></script>
        <script>
            var RongIMLib = window.RongIMLib;
            var RongIMClient = RongIMLib.RongIMClient;
            var emojiConf = {
                size: 58,
                lang: 'zh'
            }
            RongIMLib.RongIMEmoji.init(emojiConf);
            RongIMLib.RongIMVoice.init();
       
            function gif() {
                var messageName = 'GIFMessage';
                var objectName = "RC:GIFMsg";
                var isCounted = true;
                var isPersited = true;
                var mesasgeTag = new RongIMLib.MessageTag(isCounted, isPersited);
                var prototypes = ['remoteUrl', 'localPath', 'width', 'height', 'gifDataSize', 'user'];
                RongIMClient.registerMessageType(messageName, objectName, mesasgeTag, prototypes);
            }

            function init(params, cb) {
                // console.log("%%%%       ", cb);
                var appkey = params.appkey;
                var navi = params.navi;
                var config = {};
                if (navi) {
                    config.navi = navi
                }
                RongIMClient.init(appkey, null, config);
                RongIMClient.setConnectionStatusListener({
                    onChanged: function(status) {
                        // console.log("onChanged:  ", status);
                        let cbObj = {
                            type: 'ConnectionStatusListener',
                            message: ''
                        };
                        switch (status) {
                            case RongIMLib.ConnectionStatus['CONNECTED']:
                            case 0:
                                cbObj.message = '连接成功';
                                cbObj.status = 0;
                                gif();
                                cb(cbObj);
                                // console.log(cbObj);
                                break;

                            case RongIMLib.ConnectionStatus['CONNECTING']:
                            case 1:
                                cbObj.message = '连接中';
                                cbObj.status = 1;
                                cb(cbObj);
                                break;

                            case RongIMLib.ConnectionStatus['DISCONNECTED']:
                            case 2:
                                cbObj.message = '当前用户主动断开链接';
                                cbObj.status = 2;
                                cb(cbObj);
                                break

                            case RongIMLib.ConnectionStatus['NETWORK_UNAVAILABLE']:
                            case 3:
                                cbObj.message = '网络不可用';
                                cbObj.status = 3;
                                cb(cbObj);
                                break;

                            case RongIMLib.ConnectionStatus['CONNECTION_CLOSED']:
                            case 4:
                                cbObj.message = '未知原因，连接关闭';
                                cbObj.status = 4;
                                cb(cbObj);
                                break;

                            case RongIMLib.ConnectionStatus['KICKED_OFFLINE_BY_OTHER_CLIENT']:
                            case 6:
                                cbObj.message = '用户账户在其他设备登录，本机会被踢掉线';
                                cbObj.status = 6;
                                cb(cbObj);
                                break;

                            case RongIMLib.ConnectionStatus['DOMAIN_INCORRECT']:
                            case 12:
                                cbObj.message = '当前运行域名错误，请检查安全域名配置';
                                cbObj.status = 12;
                                cb(cbObj);
                                break
                        }
                    }
                });
                // console.log("等待链接到 RongIM ,初始化完成");
                // RongIMClient.setOnReceiveMessageListener({
                //     onReceived: function (message) {
                //     	// showResult(message);
                //     }
                // });
                // console.log(params.token)
                RongIMClient.connect(params.token, {
                    onSuccess: function(userId) {
                        // console.log("## 链接到socketService ##");
                        cb({
                            type: 'connect',
                            status: 'success',
                            message: userId
                        });
                    },
                    onTokenIncorrect: function() {
                        cb({
                            type: 'connect',
                            status: 'tokenIncorrect',
                            message: 'token无效'
                        });

                    },
                    onError: function(errorCode) {
                        cb({
                            type: 'connect',
                            status: 'error',
                            message: errorCode
                        });

                    }
                }, null)
            }
        </script>
        <script>
            if(`<%= information.isOpenMsgSquare %>`){
            // Vue.use(VueAwesomeSwiper)
            new Vue({
                el: "#app",
                name: "chatPage",
                data() {
                    return {
                        imKey: '',
                        token: '',
                        memberId:null,
                        roomId:null,
                        sharedMemberId:null,
                        // NeDB数据的有效期
                        dbCacheExpir: {
                            user: '3600',
                            group: '3600'
                        },
                        appkey: '',
                        navi: '',
                        idx: 0,
                        n:0,
                        j:0,
                        status: '',
                        fileUpElement: null,
                        isShowGroup: false,
                        isGroupCon: false,
                        biaoQingBao:false,
                        isBiaoqing:true,
                        //系统
                        connectStatus: '', //connect链接状态 ['success','tokenIncorrect','error']
                        sysChannelInfo: {
                            id: 1,
                            name: '系统消息',
                            portrait: ''
                        },
                        isChangeInput:false,
                        isNormalUser:false,
                        showMali: false,
                        isShowPop: false,
                        //uploadUrl:"//v0.api.upyun.com",
                        uploadUrl: 'https://jsonplaceholder.typicode.com/posts/',
                        //TODO 各种类型的消息渲染
                        /**
                         * 所有消息类型
                         *  key 对应消息体的"messageType"
                         *  @param isMsgBox Boolen 是否在聊天窗口展示
                         *  @param type Int 分类,0:状态;1:内容;2:通知;3:项目自定义web暂不处理
                         *  @param count Boolen 是否记数 (角标)
                         *  @param save  Boolen 是否有远程存储(通讯拉取)
                         *  @param name String  默认名
                         *  @param objectName String 对应消息体的"objectName"
                         */
                        allMsgType: {
                            // ### 状态
                            // 状态:对方正在输入状态消息
                            'TypingStatusMessage': {
                                isMsgBox: false,
                                type: 0,
                                count: false,
                                save: false,
                                name: '对方输入状态',
                                objectName: 'RC:TypSts'
                            },
                            // 状态:群消息已读状态回执
                            'ReadReceiptResponseMessage': {
                                isMsgBox: false,
                                type: 0,
                                count: false,
                                save: false,
                                name: '群消息已读状态回执',
                                objectName: 'RC:RRRspMsg'
                            },
                            // ### 内容
                            // 文字消息
                            'TextMessage': {
                                isMsgBox: true,
                                type: 1,
                                count: true,
                                save: true,
                                name: '文字消息',
                                objectName: 'RC:TxtMsg'
                            },
                            // 语音消息
                            'VoiceMessage': {
                                isMsgBox: true,
                                type: 1,
                                count: true,
                                save: true,
                                name: '语音消息',
                                objectName: 'RC:VcMsg'
                            },
                            // 高质量语音消息
                            'HQVoiceMessage': {
                                isMsgBox: true,
                                type: 1,
                                count: true,
                                save: true,
                                name: '高质量语音消息',
                                objectName: 'RC:HQVCMsg'
                            },
                            // 图片消息
                            'ImageMessage': {
                                isMsgBox: true,
                                type: 1,
                                count: true,
                                save: true,
                                name: '图片消息',
                                objectName: 'RC:ImgMsg'
                            },
                            // GIF图片消息
                            'GIFMessage': {
                                isMsgBox: true,
                                type: 1,
                                count: true,
                                save: true,
                                name: 'GIF图片消息 ',
                                objectName: 'RC:GIFMsg'
                            },
                            // 图文消息
                            'RichContentMessage': {
                                type: 1,
                                isMsgBox: true,
                                count: true,
                                save: true,
                                name: '图文消息',
                                objectName: 'RC:ImgTextMsg'
                            },
                            // 文件消息
                            'FileMessage': {
                                isMsgBox: true,
                                type: 1,
                                count: true,
                                save: true,
                                name: '文件消息',
                                objectName: 'RC:FileMsg'
                            },
                            // 位置消息
                            'LocationMessage': {
                                isMsgBox: true,
                                type: 1,
                                count: true,
                                save: true,
                                name: '位置消息',
                                objectName: 'RC:LBSMsg'
                            },
                            // 小视频消息
                            'SightMessage': {
                                isMsgBox: true,
                                type: 1,
                                count: true,
                                save: true,
                                name: '小视频消息',
                                objectName: 'RC:SightMsg'
                            },
                            // 合并转发消息
                            'CombineMessage': {
                                isMsgBox: true,
                                type: 1,
                                count: true,
                                save: true,
                                name: '合并转发消息',
                                objectName: 'RC:CombineMsg'
                            },
                            //公众服务单图文消息
                            'PublicServiceRichContentMessage': {
                                isMsgBox: true,
                                type: 1,
                                count: true,
                                save: true,
                                name: '服务图文消息',
                                objectName: 'RC:PSImgTxtMsg'
                            },
                            // 公众服务多图文消息
                            'PublicServiceMultiRichContentMessage': {
                                isMsgBox: true,
                                type: 1,
                                count: true,
                                save: true,
                                name: '公众服务多图文消息',
                                objectName: 'RC:PSMultiImgTxtMsg'
                            },
                            // ### 通知
                            //好友通知消息
                            'ContactNotificationMessage': {
                                isMsgBox: true,
                                type: 2,
                                count: false,
                                save: true,
                                name: '好友通知',
                                objectName: 'RC:ContactNtf'
                            },
                            // 资料通知消息
                            'ProfileNotificationMessage': {
                                isMsgBox: false,
                                type: 2,
                                count: false,
                                save: true,
                                name: '资料通知',
                                objectName: 'RC:ProfileNtf'
                            },
                            //通用命令通知消息
                            'CommandNotificationMessage': {
                                isMsgBox: false,
                                type: 2,
                                count: false,
                                save: true,
                                name: '命令通知',
                                objectName: 'RC:CmdNtf'
                            },
                            //  提示条通知消息
                            'InformationNotificationMessage': {
                                isMsgBox: true,
                                type: 2,
                                count: false,
                                save: true,
                                name: '提示条通知',
                                objectName: 'RC:InfoNtf'
                            },
                            //群组通知消息
                            'GroupNotificationMessage': {
                                isMsgBox: true,
                                type: 2,
                                count: false,
                                save: true,
                                name: '群组通知',
                                objectName: 'RC:GrpNtf'
                            },
                            //已读通知消息
                            'ReadReceiptMessage': {
                                isMsgBox: false,
                                type: 2,
                                count: false,
                                save: false,
                                name: '已读通知',
                                objectName: 'RC:ReadNtf'
                            },
                            //公众服务命令消息
                            'PublicServiceCommandMessage': {
                                isMsgBox: false,
                                type: 2,
                                count: false,
                                save: false,
                                name: '公众服务命令',
                                objectName: 'RC:PSCmd'
                            },
                            // 命令消息
                            'CommandMessage': {
                                isMsgBox: false,
                                type: 2,
                                count: false,
                                save: false,
                                name: '命令消息',
                                objectName: 'RC:CmdMsg'
                            },
                            //聊天室属性通知消息
                            'ChatRoomKVNotiMessage': {
                                isMsgBox: true,
                                type: 2,
                                count: false,
                                save: false,
                                name: '聊天室属性',
                                objectName: 'RC:chrmKVNotiMsg'
                            },
                        },
                        messageTypeArr: [
                            //状态
                            'TypingStatusMessage', // 状态:对方正在输入状态消息
                            'ReadReceiptResponseMessage', // 状态:群消息已读状态回执
                            //内容
                            'TextMessage', // 文本
                            'VoiceMessage', // 语音消息
                            'HQVoiceMessage', // 高质量语音消息
                            'ImageMessage', // 图片
                            'GIFMessage', // GIF 图片消息
                            'RichContentMessage', // 图文
                            'FileMessage', // 文件
                            'LocationMessage', // 位置
                            'SightMessage', // 小视频消息
                            'CombineMessage', // 合并转发消息
                            'PublicServiceRichContentMessage', //公众服务单图文消息
                            'PublicServiceMultiRichContentMessage', // 公众服务多图文消息
                            //通知
                            'ContactNotificationMessage', //好友通知消息
                            'ProfileNotificationMessage', // 资料通知消息
                            'CommandNotificationMessage', //通用命令通知消息
                            'InformationNotificationMessage', //  提示条通知消息
                            'GroupNotificationMessage', //群组通知消息
                            'ReadReceiptMessage', //已读通知消息
                            'PublicServiceCommandMessage', //公众服务命令消息
                            'CommandMessage', // 命令消息
                            'ChatRoomKVNotiMessage', //聊天室属性通知消息
                        ],
                        // 会话类型
                        ConversationType: [
                            null,
                            RongIMLib.ConversationType.PRIVATE, //单聊
                            null,
                            RongIMLib.ConversationType.GROUP, //群组
                            RongIMLib.ConversationType.CHATROOM, //聊天室
                            RongIMLib.ConversationType.CUSTOMER_SERVICE, //客服
                            RongIMLib.ConversationType.SYSTEM, //系统
                            RongIMLib.ConversationType.APP_PUBLIC_SERVICE, //公众账号(默认关注)
                            RongIMLib.ConversationType.PUBLIC_SERVICE //公众账号(手动关注)
                        ],
                        mouseLeftMenu: false,
                        emojiConf: {
                            url: '/images/emojis-normal.png',
                            size: 58,
                            lang: 'zh'
                        }, //表情包配置 可扩展
                        emojiList: false, //表情包
                        allShowDatas: {}, // 所有通讯记录
                        showDatas: [], //当前 通讯记录
                        selfObj:{
                            // portrait:'https://cdn-static.qunmai.com/all/user/memberImage/chatRoom/chatRoomTem.png'
                        }, //当前用户的 ID ,name ,imgUrl
                        socketStatus: '', // IM 通讯状态
                        socketToObj: {}, //  当前通讯的对象,初始化 系统
                        groupObjList: {}, //群组数据列表
                        userObjList: {}, //用户数据列表
                        isLeftListInit: false,
                        leftObjList: [], // 左则栏 列表
                        msgListIsEnd: false,
                        textMessage: '',
                        msg: '',
                        number: 8,
                        messageScroll: false,
                        uri: '',
                        base64: '',
                        fileObj: {},
                        gifObj: {},
                        imgList: [],
                        showImg: false,
                        initialIndex: null,
                        timer: null,
                        currentTime: 0,
                        backStatus: '', //消息回执状态
                        dialogVisible: false, //控制马甲列表显示
                        adminInfo: {},
                        historyNum: null,
                        groupMemberList: [], //群组成员列表
                        isLoad: false, //是否显示查看更多
                        labelMsg:'',
                        isFirstSendMsg:true,
                        msgCompare:[],   //存储发送上一条消息和这条消息
                        userInfoObj:{},
                        swiperOption: {
                            width: window.innerWidth,
                            zoom : false,
                            initialSlide: 0,
                            direction: 'horizontal',
                            autoHeight: true,
                            slidesPerView:1,   //显示slide的数量
                            centeredSlides: true, //居中显示
                            spaceBetween: 15, //间距
                        },
                        showImageUri:{},
                        isAppShow:false,
                        isShowDiv:false,
                        isAndroid:false,
                        isiOS:false,
                        isRuanianpanJump:false,
                        heightIos:null,
                        biaoQingBaoHeight:null,
                    }
                },
                components: {
                },
                created(){
                    var url = location.search; //获取url中"?"符后的字串 
                    var theRequest = new Object();
                    if (url.indexOf("?") != -1) {
                        var str = url.substr(1);
                        strs = str.split("&");
                        for (var i = 0; i < strs.length; i++) {
                            // theRequest[strs[i].split("=")[0]]=unescape(strs[i].split("=")[1]); 
                            theRequest[strs[i].split("=")[0]] = strs[i].split("=")[1];
                        }
                    }
                    if(theRequest.shareInfo){
                        var shareInfo =`<%= shareInfo.memberId %>`;
                        var organId =`<%= shareInfo.itemId %>`;
                        var sharedMemberId = `<%= shareInfo.sharedMemberId %>`;
                        if(organId&&typeof organId!='undefined'){
                            this.roomId = Number(organId);
                        }
                        if(sharedMemberId||sharedMemberId!=null){
                            this.sharedMemberId = sharedMemberId;
                        }
                    }else{
                        if(theRequest.sharedMemberId&&typeof theRequest.sharedMemberId!='undefined'){
                        this.sharedMemberId = theRequest.sharedMemberId;
                        }
                        // console.log("分享人Id:",this.sharedMemberId);
                        this.roomId = Number(theRequest.organId)||Number(theRequest.roomId);
                    }
                    this.getCasualUser();
                },
                beforeMount() {
                    this.isAppShow = true;
                },
                mounted() {
                    // console.log(RongIMLib);
                    RongIMLib.RongIMEmoji.init(this.emojiConf);
                    // window.addEventListener('scroll', this.handleScroll, true)
                        var that = this;
                        setTimeout(function(){
                            that.scrollBottom(1);
                        },500)
                        var u = navigator.userAgent;
                        var isAndroid = u.indexOf('Android') > -1 || u.indexOf('Adr') > -1; 
                        var isiOS =  !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/); 
                        if(isAndroid){
                            this.isAndroid = true;
                            this.isShowDiv = false;
                            window.addEventListener('resize',this.isShowKeyboard, false); 
                        }else{
                            this.isiOS = true;
                            this.ruanPanHandler();
                        }  
                },
                filters: {
                },
                updated() {
                    // // 聊天定位到底部
                    //  this.scrollBottom();
                },
                methods: {
                    //
                    closeRuanpan(){
                        // console.log("关闭软键盘");
                        setTimeout(function(){
                            document.activeElement.blur();
                        },100)
                        this.biaoQingBao = false;
                        if( this.isAndroid){
                            this.$refs.chatMsg.style.height='auto'
                        }
                        if( this.isiOS){
                            this.$refs.chatMsg.style.height='auto'
                        }
                    },
                    add0(m) {
                        return m < 10 ? '0' + m : m
                    },
                    dateMoent(time) {
                        var time = time;
                        var week;
                        if (time.getDay() == 0) week = "周日";
                        if (time.getDay() == 1) week = "周一";
                        if (time.getDay() == 2) week = "周二";
                        if (time.getDay() == 3) week = "周三";
                        if (time.getDay() == 4) week = "周四";
                        if (time.getDay() == 5) week = "周五";
                        if (time.getDay() == 6) week = "周六";
                        return week;
                    },
                    format(shijianchuo, type) {
                        // 时间戳处理
                        //shijianchuo是整数，否则要parseInt转换
                        var currentTime = new Date();
                        var currentYear = currentTime.getFullYear();
                        var currentMonth = currentTime.getMonth() + 1;
                        var currentDay = currentTime.getDate();
                        var currentHours = currentTime.getHours();
                        var currentMinutes = currentTime.getMinutes();
                        var currentSecond = currentTime.getSeconds();
                        var time = new Date(shijianchuo);
                        var y = time.getFullYear();
                        var m = time.getMonth() + 1;
                        var d = time.getDate();
                        var h = time.getHours();
                        var mm = time.getMinutes();
                        if (currentYear == y) {
                            var currentTimestamp = (new Date()).getTime();
                            var timestamp = (new Date(shijianchuo)).getTime();
                            var delta = (currentTimestamp - timestamp);
                            if (currentMonth == m && currentDay == d) {
                                // 时间相差60秒以内
                                if (delta < 60 * 1000) {
                                    return '刚刚'
                                } else {
                                    //  < 10 ? '0' + h : h +':'
                                    var timeM = '今天    '+this.add0(h) + ':' + this.add0(mm);
                                    return timeM;
                                }
                            } else {
                                // 当年 && 当天之外的时间（即昨天及以前的时间）
                                // 昨天（以“现在”的时候为基准-1天）
                                var todayT = currentHours * 60 * 60 * 1000 + currentMinutes * 60 * 1000 + currentSecond * 1000;
                                var yestodayT = todayT + 24 * 60 * 60 * 1000;
                                var week = todayT + 24 * 60 * 60 * 1000 * 7;
                                //  var  = todayT + 24*60*60*1000;
                                if (delta >= week) {
                                    if (type == 1) {
                                        return this.add0(y) + '/' + this.add0(m) + '/' + this.add0(d);
                                    } else {
                                        return this.add0(y) + '/' + this.add0(m) + '/' + this.add0(d) + '  ' + this.add0(h) + ':' + this.add0(mm);
                                    }
                                }
                                if (delta > yestodayT && delta < week) {
                                    var weekShow = this.dateMoent(time);
                                    if (type == 1) {
                                        return weekShow;
                                    } else {
                                        return weekShow + '  ' + this.add0(h) + ':' + this.add0(mm);
                                    }
                                }
                                if (delta > todayT && delta < yestodayT) {
                                    if (type == 1) {
                                        return '昨天'
                                    } else {
                                        //  console.log('yestodayT')
                                        return '昨天' + ' ' + this.add0(h) + ':' + this.add0(mm);
                                    }
                                }
                            }
                        } else {
                            if (type == 1) {
                                return this.add0(y) + '/' + this.add0(m) + '/' + this.add0(d);
                            } else {
                                return this.add0(y) + '/' + this.add0(m) + '/' + this.add0(d) + '  ' + this.add0(h) + ':' + this.add0(mm);
                            }
                        }
                    },
                    //显示表情
                    openBiaoqing(){
                         this.biaoQingBao =  true;
                    },
                    //点击红包及电话号码
                    rewardMali(val) {
                        // console.log(val)
                        if (val) {
                            var u = navigator.userAgent;
                            var isAndroid = u.indexOf('Android') > -1 || u.indexOf('Adr') > -1; //android终端
                            var isiOS = !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/); //ios终端
                            if(isAndroid){
                                // chatRoomId
                                this.isShowPop = true;
                                this.showMali = false;
                            }
                 
                        } else {
                            var sendData = {
                                chatRoomId: this.roomId
                            }
                            axios.post('/chatRoom/clickReward?roomId='+sendData.chatRoomId, sendData).then(resp => {
                                // console.log(resp.data)
                                if (resp.data.errorCode == 0) {
                                    this.isShowPop = true;
                                    this.showMali = true;
                                    this.isNormalUser =false;
                                } else {
                                    // alert(resp.data.message);
                                }

                            }).catch(err => {
                                console.log('请求失败:' + err);
                            });
                        }
                    },
                    closeConfirm() {
                        this.isShowPop = false;
                    },
                    onDownload() {
                        window.location.href = "https://www.qunmai.com/downloadPage.html"
                    },
                    //打电话
                    call(){
                         
                    },
                     isShowKeyboard() {
                        const winHeight = window.innerHeight;
                        var thisHeight = window.innerHeight;
                            // alert("winHeight:"+winHeight); 
                            // alert("thisHeight:"+thisHeight);
                            if (thisHeight < 500) {
                                //当软键盘弹出，在这里面操作
                                let contH = thisHeight;
                                //  this.$refs.firend.style.height = contH+'px';
                                 this.scrollBottom(1);
                                  this.biaoQingBaoHeight = thisHeight;
                                  this.isBiaoqing = true;
                                // alert(thisHeight)
                                // let data1 = this.$refs.firend.style.height
                            } else {
                                this.$refs.firend.style.height = "100%";
                                //当软键盘收起，在此处操作
                                // alert("#####:软盘监听收起");
                            }
                            window.addEventListener('focusin', () => {
                                // alert("###")
                                let contH = thisHeight;
                                 this.$refs.firend.style.height = contH+'px';
                                 this.$refs.chatMsg.style.height='auto'
                                //  this.$refs.chatMsg.style.height = contH+'px';
                                this.biaoQingBao=false;
                                this.isBiaoqing = true;
                                this.scrollBottom(1);
                            })
                    },
                    //软盘弹起后的处理
                    ruanPanHandler(){
                       var that = this;
                        window.addEventListener('focusin', () => {
                                this.biaoQingBao=false;
                                this.isBiaoqing = true;
                                this.isRuanianpanJump = true;
                            setTimeout(() => {
                                let ua = navigator.userAgent.toLowerCase()
                                let u = navigator.userAgent.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/)
                                if (ua.match(/MicroMessenger/i) == 'micromessenger' && !!u) {
                                        //在iphone 微信中
                                        let currentPosition, timer
                                        let speed = 1 //页面滚动距离
                                        timer = setInterval(function() {
                                            currentPosition =
                                            document.documentElement.scrollTop || document.body.scrollTop
                                            currentPosition -= speed
                                            that.heightIos=Number(document.documentElement.clientHeight)-Number(currentPosition);
                                            that.$refs.firend.style.height= that.heightIos;
                                            window.scrollTo(0, document.documentElement.clientHeight) //页面向上滚动
                                            // alert(that.heightIos)
                                            clearInterval(timer)
                                        }, 1)
                                 }else{
                                    let currentPosition, timer
                                        let speed = 1 //页面滚动距离
                                        timer = setInterval(function() {
                                            currentPosition =
                                            document.documentElement.scrollTop || document.body.scrollTop
                                            currentPosition -= speed
                                            window.scrollTo(0, document.documentElement.clientHeight-200) //页面向上滚动
                                            clearInterval(timer)
                                        }, 1)
                                 }
                            }, 100)
                          
                        });
                       window.addEventListener('focusout', () => {
                            this.isChangeInput = false;
                            this.isRuanianpanJump = false;
                            this.isBiaoqing = true;
                            setTimeout(() => {
                                let ua = navigator.userAgent.toLowerCase()
                                let u = navigator.userAgent.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/)
                                if (ua.match(/MicroMessenger/i) == 'micromessenger' && !!u) {
                                        //在iphone 微信中
                                        let currentPosition, timer
                                        let speed = 1 //页面滚动距离
                                        timer = setInterval(function() {
                                            currentPosition =
                                            document.documentElement.scrollTop || document.body.scrollTop
                                            currentPosition -= speed
                                            window.scrollTo(0, 0) //页面向上滚动
                                            clearInterval(timer)
                                        }, 1)
                                 }
                            }, 100)  
                            })
                    },
                    scrollBottom(val) {
                        // 聊天定位到底部
                        var chatReword = document.getElementById('chatRecord');
                        // this.biaoQingBao=false;
                        this.$nextTick(() => {
                            if(this.$refs && this.$refs.chatMsg && this.$refs.chatMsg.scrollHeight){
                            if (val == 1) {
                                if(this.$refs.chatMsg&&this.$refs.chatMsg.scrollHeight){
                                    this.$refs.chatMsg.scrollTop = this.$refs.chatMsg.scrollHeight;
                                    // alert(this.$refs.chatMsg.scrollTop +' ' +this.$refs.chatMsg.scrollHeight)
                                }
                            } else {
                                var historyNum = this.historyNum;
                                this.$refs.chatMsg.scrollTop = this.$refs.chatMsg.scrollHeight * parseFloat(1 / (historyNum + 1));
                            }
                            }
                        })

                    },
                    splitName(realName) {
                        var name = '';
                        //判断中文 数字
                        var pattern = new RegExp("[\u4E00-\u9FA5]+")
                        var pattern3 = new RegExp("[0-9]+");
                        //判断英文
                        var pattern2 = new RegExp("[A-Za-z]+");
                        let shortName = realName.split('(')[0];
                        if (pattern.test(shortName) || pattern3.test(shortName)) {
                            if (shortName.length > 2) {
                                name = ((shortName.split("").reverse().join("")).substring(0, 2)).split("").reverse().join("")
                            } else {
                                name = ((shortName.split("").reverse().join("")).substring(0, 1)).split("").reverse().join("")
                            }
                        } else if (pattern2.test(shortName)) {
                            //   console.log(realName)
                            if (shortName.length > 2) {
                                name = shortName.substring(0, 2);
                            } else {
                                name = shortName.substring(0, 1);
                            }
                        }
                        return name;
                    },
                    /**
                     * 表情 统一处理函数
                     * @param opt Object {type:String,isHtml:Boolen}
                     *      type:  "en" 转成表情 [默认];"de" :转成文本
                     *      isHtml: 是否是html 转换 [默认false]
                     * @param str String
                     */
                    emojiFun: function(opt, str) {
                        if (str && typeof str == 'string') {


                            let type = 'en';
                            if (opt.type && opt.type == 'de') {
                                type = 'de';
                            }
                            let h = false;
                            if (opt.isHtml && opt.isHtml === true) {
                                h = true;
                            }
                            let backStr = false;
                            try {
                                if (h) {
                                    if (type === 'en') {
                                        backStr = RongIMLib.RongIMEmoji.emojiToHTML(str);
                                    } else {
                                        backStr = RongIMLib.RongIMEmoji.symbolToHTML(str);
                                    }
                                } else {
                                    if (type === 'en') {
                                        backStr = RongIMLib.RongIMEmoji.symbolToEmoji(str);
                                    } else {
                                        backStr = RongIMLib.RongIMEmoji.emojiToSymbol(str);
                                    }
                                }
                            } catch (e) {
                                console.error("####表情处理Error:  ", str);
                                console.error("####表情处理Error:  ", e);
                                return str;
                            }
                            if (backStr) {
                                return backStr
                            } else {
                                return str;
                            }
                        } else {
                            console.log("表情转换必须是String");
                            return false;
                        }
                    },
                    //获取临时游客的Id和token
                     async getCasualUser(){
                        var that = this;
                        var chatRoomId = this.roomId;
                        let resp = await axios.get('/chatRoom/getUserId?roomId='+chatRoomId);
                               if (resp.data.errorCode == 0) {
                                    that.selfObj.chatMemberId = resp.data.data.memberId;
                                    that.selfObj.chatName = resp.data.data.realName;
                                    if(resp.data.data&&resp.data.data.imageUrl){
                                        that.selfObj.imageUrl = resp.data.data.imageUrl;
                                    }else{
                                        that.selfObj.imageUrl = '/images/touristsHead.png'
                                    }
                                    if(resp.data.data&&resp.data.data.memberSource){
                                        that.selfObj.memberSource = resp.data.data.memberSource;
                                    }
                                    if(resp.data.data&&resp.data.data.telephone){
                                        that.selfObj.telephone = resp.data.data.telephone;
                                    }
                                    if(resp.data.data&&resp.data.data.deviceUuid){
                                        that.selfObj.deviceUuid = resp.data.data.deviceUuid;
                                    }
                                    if(resp.data.data&&resp.data.data.token){
                                        that.token = resp.data.data.token;
                                    }
                                    if(resp.data.data&&resp.data.data.imKey){
                                        that.imKey = resp.data.data.imKey;
                                    }
                                    // that.$set(that.selfObj, 'chatMemberId', resp.data.data.memberId);
                                    // that.$set(that.selfObj, 'chatName', resp.data.data.realName);
                                    // that.$set(that.selfObj, 'imageUrl', resp.data.data.imageUrl);
                                    // that.$set(that.selfObj, 'telephone', resp.data.data.telephone);
                                    await that.init();
                                    if(resp.data.data.isNoTemp==1){
                                        that.isNormalUser = true;
                                    }else{
                                        that.isNormalUser = false;
                                    }
                                    // console.log("chatMemberId:",that.selfObj);
                                 } else {
                                    //  alert(resp.data.message);
                                 }
                            //  }).catch(err => {
                            //     console.log('请求失败:' + err);
                            //  });        
                     },
                    /**
                     * IM初始化
                     * [IM初始化==>链接接口初始化]==>会话列表初始化==>监听初始化
                     */
                    init() {
                        // console.log(this.imKey);
                        var appkey = this.imKey;
                        var token = this.token;
                        if (!appkey) {
                            // alert('appkey 不能为空');
                        }else if(!token){
                            // alert('缺少参数');
                        }else {
                            init({
                                appkey:appkey,
                                token:token, 
                                navi: this.navi
                            }, this.imCallBack)
                        }
                    },
                    /**
                     * 链接接口初始化
                     * IM初始化==>[链接接口初始化]==>会话列表初始化==>监听初始化
                     */
                    connectIMInit() {
                        // console.log("%%%%%%%%%%%%%%:",token);
                        let token = this.token;
                        let cb = this.imCallBack;
                        if (this.connectStatus == 'success') {
                            // console.log("## 断开当前 connect ... ## ");
                            RongIMClient.getInstance().disconnect();
                            this.showDatas = [];
                            // this.leftObjList = [];
                        }
                        RongIMClient.connect(token, {
                            onSuccess: function(userId) {
                                // console.log("## 链接到socketService ##");
                                cb({
                                    type: 'connect',
                                    status: 'success',
                                    message: userId
                                });
                            },
                            onTokenIncorrect: function() {
                                cb({
                                    type: 'connect',
                                    status: 'tokenIncorrect',
                                    message: 'token无效'
                                });

                            },
                            onError: function(errorCode) {
                                cb({
                                    type: 'connect',
                                    status: 'error',
                                    message: errorCode
                                });

                            }
                        }, null)

                    },
                     /**
                     * 链接接口初始化
                     * IM初始化==>链接接口初始化==>会话列表初始化==>[监听初始化]
                     */
                    conversationListInit(){
                        let cb = this.imCallBack;
                        var conversationTypes = [
                           RongIMLib.ConversationType.CHATROOM,
                            RongIMLib.ConversationType.PRIVATE,
                            RongIMLib.ConversationType.GROUP,
                            RongIMLib.ConversationType.SYSTEM];
                        var count = 150;
                        RongIMClient.getInstance().getConversationList({
                            onSuccess: function(list) {
                                // console.log("$$$$$$$$:",list);
                                cb({
                                    type:'ConversationList',
                                    message:list
                                });
                            },
                            onError: function(error) {
                                // console.log('获取会话列表失败', error);
                                cb({
                                    error:true,
                                    type:'ConversationList',
                                    message:error
                                });
                            }
                        }, conversationTypes, count);
                    },
                    //IM通讯 回调
                    imCallBack(obj) {
                        // console.log("callBack:   ", obj);
                        let cbType = [
                            'ConnectionStatusListener', //  状态监听
                            'MessageListener', //  收到消息
                            'connect', //  链接动作
                            'getChatRoomInfo', //  获取用户信息
                            'getChatRoomHistoryMsg'  //获取聊天信息
                        ];
                        if (obj.error) {
                            this.callBackErr(obj)
                        } else if (obj.type && cbType.indexOf(obj.type) != -1) {
                            switch (obj.type) {
                                case 'ConnectionStatusListener':
                                    if(obj.status == 0 ){
                                        this.messageListenerInit()
                                    }
                                    this.socketStatus = "_" + obj.message;
                                    break;
                                case 'connect':
                                    this.connectStatus = obj.status;
                                    if (obj.status == "error") {
                                        this.callBackErr(obj);
                                    } else if (obj.status == "success") {
                                        let dataobj =JSON.parse(JSON.stringify(obj));
                                        this.selfObj.chatMemberId = dataobj.message;
                                        // this.$set(this.selfObj, 'chatMemberId', obj.message);
                                        // console.log('个人信息：', this.selfObj);
                                        this.joinChatInit();
                                    } else {
                                        this.socketStatus = "_" + obj.message;
                                    }
                                    break;
                                case 'getChatRoomInfo':
                                    // console.log("对象信息：", obj.message)
                                    this.getChatRoomInfo();
                                    break;
                                case 'getChatRoomHistoryMsg':
                                    this.getChatRoomHistoryMsg();
                                    break;
                                case 'MessageListener':
                                    // console.log("%%%%%%%%%   ", obj);
                                    this.doMessage(obj.message, 0);
                                    break;
                            }
                        } else {
                            console.log("### 这是个什么东东 ###  ", obj);
                        }
                    },
                    /**
                     *  IM通讯回调 Error 统一处理
                     */
                    callBackErr(err) {
                        console.log("IM交互错误:   ", err);
                        alert("交互错误")
                    },
                    /**
                     * 链接接口初始化
                     * IM初始化==>链接接口初始化==>会话列表初始化==>[监听初始化]
                     */
                     joinChatInit() {
                        let cb = this.imCallBack;
                        var chatRoomId = String(this.roomId);
                        var count = 50;
                        // console.log("chatRoomId:",chatRoomId);
                        RongIMClient.getInstance().joinChatRoom(chatRoomId, count, {
                            onSuccess: function() {
                                // console.log("有没有返回信息？：",res);
                                cb({
                                    type:'getChatRoomInfo',
                                   
                                })
                                console.log('加入聊天室成功');
                            },
                            onError: function(error) {
                                cb({
                                    error: true,
                                    type: 'getChatRoomInfo',
                                    message: error
                                });
                                console.log('加入聊天室失败', error);
                            }
                        });   
                    },
                    getChatRoomInfo(){
                        let getUserInfo = this.getUserInfoList;
                        var chatRoomId = String(this.roomId);
                        var count = 20;
                        var order = RongIMLib.GetChatRoomType.REVERSE;
                        RongIMClient.getInstance().getChatRoomInfo(chatRoomId, count, order, {
                            onSuccess: function(chatRoom) {
                                // console.log("列表：",chatRoom.userInfos);
                                if(chatRoom){
                                    if(chatRoom.userInfos.length<200){
                                        //需要完成每200毫秒调用一次
                                            getUserInfo(chatRoom.userInfos);
                                    }else{
                                        //人数多时，60人调用一次
                                        var lineNum = chatRoom.userTotalNums % 60 === 0 ? chatRoom.userTotalNums / 60 : Math.floor((chatRoom.userTotalNums / 60) + 1);
                                        for (let i=0;i<lineNum;i++){
                                            var temp = chatRoom.userInfos.slice(i * 60, i * 60 + 60);;
                                            getUserInfo(temp.userInfos);
                                        }  
                                    }
                                }else{
                                   console.log("没有");
                                }
                                /*
                                    chatRoom.userInfos  聊天室成员信息
                                    chatRoom.userTotalNums  聊天室总人数
                                */
                            },
                                onError: function(error) {
                                    console.log('获取聊天室信息失败', error);
                                }
                            });
                    },
                     //获取聊天室用户信息
                     getUserInfoList(chatRoomUserInfos){
                        let cb = this.imCallBack;
                        let that = this;
                        var sendData =[];
                        // console.log(chatRoomUserInfos.length);
                         for(let i=0;i<chatRoomUserInfos.length;i++){
                            //  console.log("$####")
                             let obj ={
                                memberId: chatRoomUserInfos[i].id,
                                organizationId:Number(this.roomId)
                             }
                            //  console.log(obj)
                             sendData.push(obj);
                         }
                        //  console.log(sendData)
                        //  console.log("未更改selfObj：",that.selfObj)
                         let memberId = this.selfObj.chatMemberId;
                        //  console.log(memberId);
                        let roomId =this.roomId;
                        axios.post('/chatRoom/getUserList?roomId='+this.roomId,sendData).then(resp => {
                                if (resp.data.errorCode == 0) {
                                    let userInfo = resp.data.data;
                                    // console.log(resp.data.data);
                                       userInfo.forEach(item=>{
                                        // if(item.memberSource==2){
                                             if(item.chatMemberId==memberId){
                                                // console.log("item:",item)
                                                Object.assign(that.selfObj,item);
                                                if(item.imageUrl){
                                                    that.selfObj.imageUrl = item.imageUrl;
                                                }
                                                if(item.chatName){
                                                    that.selfObj.chatName = item.chatName;
                                                }
                                                if(item.chatMemberId){
                                                    that.selfObj.chatMemberId = item.chatMemberId;
                                                }
                                                if(item.memberSource){
                                                    that.selfObj.memberSource = item.memberSource;
                                                }
                                                if(item.organizationId){
                                                    that.selfObj.organizationId = item.organizationId;
                                                }
                                                // console.log("调用接口修改selfObj:",that.selfObj);
                                                // that.selfObj.portrait=item.imageUrl;
                                                // that.selfObj.name = item.chatName;
                                                // that.selfObj.memberSource = item.memberSource;
                                                // that.selfObj.organizationId = item.organizationId;
                                            }
                                        //  }
                                         that.userInfoObj[item.chatMemberId]=item;
                                       })
                                    // console.log("^^^^^^^^^userInfo:",this.userInfoObj);
                                    //监听收到的消息
                                    //    that.messageListenerInit();
                                    cb({
                                        type:'getChatRoomHistoryMsg'
                                    })
                                } else {
                                    // alert(resp.data.message);
                                }

                            }).catch(err => {
                                // console.log('请求失败:' + err);
                            });
                     },
                     //获取聊天记录
                     getChatRoomHistoryMsg(){
                        var chatRoomId = String(this.roomId);
                        // console.log('聊天室id:',chatRoomId, typeof chatRoomId);
                        var order = RongIMLib.GetChatRoomType.REVERSE;
                        var count = 10;
                        var cbFun = this.historyMessageCallBack;
                        RongIMClient.getInstance().getChatRoomHistoryMessages(chatRoomId, count, order, {
                        onSuccess: function(list, hasMore) {
                            cbFun(list, hasMore);
                            // console.log("记录：", list)
                            console.log('获取聊天室历史消息成功');
                        },
                        onError: function(error) {
                            // 请检查: 是否开通聊天室消息云存储服务
                            console.log('获取聊天室历史消息失败:',error);
                        }
                        });
                    },
                    //获取实时发送的消息
                    messageListenerInit() {
                        //  console.log("开始监听");
                        var chatRoomId = this.roomId;
                        let cb = this.imCallBack;
                        RongIMClient.setOnReceiveMessageListener({
                            // 接收到的消息
                            onReceived: function(message) {
                                // console.log("#######消息监听：",message)
                                // console.log("message:  ",JSON.stringify(message));
                                // cb('新消息 ' + message.targetId + ':' + JSON.stringify(message))
                                if(message.targetId == chatRoomId){
                                    cb({
                                        type: 'MessageListener',
                                        message: message
                                   });
                                }
                              
                            }
                        })
                    },
                    /**
                     *  收到,发送消息的处理动作
                     * @param obj Object 收到消息通知
                     * @param type number 1:发送
                     */
                       doMessage: async function(obj, type) {
                        if (type == 1) {

                        } else {
                            //处理接收信息
                            // console.log("处理接收信息: ", obj);
                            // console.log('allMsgType:',this.allMsgType);
                            let messageTypeArr = Object.keys(this.allMsgType);
                            if (obj.content &&
                                obj.messageType &&
                                typeof obj.messageType == 'string' &&
                                messageTypeArr.indexOf(obj.messageType) != -1) {
                                // ### 加一个扩展标志 ###
                                obj.messageType_extraObject = this.allMsgType[obj.messageType];
                                // console.log("extraObject:",obj.messageType_extraObject);
                                switch (obj.messageType_extraObject.type) {
                                    // 状态
                                    case 0:
                                        if (obj.messageType == 'TypingStatusMessage') {
                                            //对方正在输入状态消息
                                            if (obj.senderUserId &&
                                                this.socketToObj.type == 1 &&
                                                obj.senderUserId == this.socketToObj.id) {
                                                //TODO 当前通讯用户的状态
                                                var _this = this;
                                                if (obj.messageType_extraObject.objectName == 'RC:TypSts') {
                                                    this.status = '(对方正在输入...)'
                                                }
                                                setTimeout(function() {
                                                    _this.status = ''
                                                }, 1000)

                                                console.log("当前通讯用户的状态:  ", obj);
                                            }
                                        } else {
                                            //群消息已读状态回执
                                            console.log("群消息已读状态回执_##TODO##: ", obj);
                                            if (obj.targetId &&
                                                this.socketToObj.type == 3 &&
                                                obj.targetId == this.socketToObj.id) {
                                                //TODO
                                            }

                                        }
                                        break;
                                        //内容类
                                    case 1:
                                            // console.log("obj.content.user",!obj.content.user);
                                            
                                            if (!obj.content.user) {
                                                if(obj.senderUserId!=this.selfObj.chatMemberId){
                                                    if(this.userInfoObj[obj.senderUserId]){
                                                        // console.log("userInfoObj:",this.userInfoObj);
                                                        obj.content.user = this.userInfoObj[obj.senderUserId];
                                                    }else{
                                                        await this.getUserInfoList([{id:obj.senderUserId}]);
                                                        obj.content.user = this.userInfoObj[obj.senderUserId];
                                                    } 
                                                    // console.log("key:",this.userInfoObj[obj.senderUserId]);
                                                }else{
                                                    obj.content.user = this.selfObj;
                                                }
                                            }
                                            if (obj.messageType == 'TextMessage') {
                                                    this.textMessage = '';
                                                    obj.content.content = this.replaceTextMsg(obj.content.content);
                                                    // msg.content.content = this.emojiFun({
                                                    //     type: 'en'
                                                    // }, msg.content.content)
                                                    obj.content.content = this.emojiFun({type:'en'},  obj.content.content)
                                                }
                                            if (obj.messageType == "VoiceMessage"){
                                                   obj.isPlaying = false;
                                                   if(obj.senderUserId == this.selfObj.chatMemberId){
                                                    this.$set(obj, "VoiceImg", '/images/voice_sentMe.png');
                                                   }else{
                                                       this.$set(obj, "VoiceImg", '/images/voice_sent_Other.png');
                                                   }
                                                    // console.log("这里处理arm TO wav");
                                                var blob = RongIMLib.RongIMVoice.base64ToBlob(obj.content.content, "audio/amr");
                                                var reader = new FileReader();
                                                reader.onload = function(e) {
                                                    var data = new Uint8Array(e.target.result);
                                                    var samples = AMR.decode(data);
                                                    var pcm = PCMData.encode({
                                                        sampleRate:8e3,
                                                        channelCount:1,
                                                        bytesPerSample:2,
                                                        data:samples
                                                    });

                                                    let audioSrc = "data:audio/wav;base64," + btoa(pcm);
                                                    obj.content.content = audioSrc;
                                                    // console.log(" $$$$$$$$$$$$$$$$ 异步处理:    ",audioSrc)
                                                };
                                                reader.readAsArrayBuffer(blob);
                                                    // this.obj.VoiceImg = '/images/apy.png';
                                                    // alert(obj.VoiceImg);
                                                    obj.index = this.n;
                                                    this.n++;         
                                            }
                                            if(obj.messageType=="ImageMessage"||obj.messageType=="GIFMessage"){
                                               let img = false;
                                                img = new Image();
                                                obj.index = this.j;
                                                if(obj.messageType=="ImageMessage"){
                                                    img.src = "data:image/png;base64,"+obj.content.content;//（图片的base64编码字符串）
                                                    img.imageUri = obj.content.imageUri;
                                                }else{
                                                    img.src = "data:image/png;base64,"+obj.content.localPath;//（图片的base64编码字符串）
                                                    img.imageUri = obj.content.remoteUrl;
                                                }
                                                img.timeStrapE = obj.sentTime;
                                                // imgUri.imageUri = datalist[i].content.imageUri
                                                // alert(img);
                                                let imgData = img.imageUri;
                                                if(this.isiOS){
                                                    var imgList = JSON.parse(JSON.stringify(this.imgList));
                                                     imgList.push({
                                                        imageUri:imgData,
                                                        timeStrapE:obj.sentTime
                                                     })
                                                     this.imgList = imgList.sort(function(a,b){
                                                        return a.timeStrapE-b.timeStrapE;
                                                     });
                                                }else{
                                                    img.onload = this.imgOnloadFun;
                                                }
                                                this.j++;
                                            }
                                            if(obj.content.user&&obj.content.user.chatName){
                                                obj.content.user.imgName = this.splitName(obj.content.user.chatName);
                                            }
                                            obj.isShowTime = this.compareTime(obj.sentTime);
                                            obj.sendTimeFomat=this.format(obj.sentTime,1);
                                            // console.log("修改后的obj:",obj);
                                            // console.log("showDatas******:",this.showDatas);
                                            // this.closeRuanpan(); //关闭软盘及表情包
                                            
                                            this.showDatas.push(obj);
                                            this.showDatas = this.showDatas.sort(function(a, b) {
                                                return a.sentTime - b.sentTime;
                                            });
                                            this.scrollBottom(1);
                                            // console.log("showDatas$$$$$$:",this.showDatas);
                                            // TODO 页面 根据类型 渲染
                                            //TODO 通信记录列表移动到底部

                                        // }
                                        // this.doLeftList({
                                        //     type: 'message',
                                        //     data: obj
                                        // })
                                        break;
                                        // 通知类
                                    case 2:
                                        break;
                                        //自定义类,web暂不做处理
                                    case 3:
                                        break;
                                }
                            } else {
                                console.error("末知的消息类型");
                                return false;
                            }
                        }
                    },
                    // 图片列表
                    imgOnloadFun(imgE){
                        var imgList = JSON.parse(JSON.stringify(this.imgList));
                        imgList.push({
                            height:imgE.path[0].height,
                            width:imgE.path[0].width,
                            timeStrapE:imgE.path[0].timeStrapE,
                            imageUri:imgE.path[0].imageUri
                        });
                        this.imgList = imgList.sort(function(a,b){
                            return a.timeStrapE-b.timeStrapE;
                        });
                         
                        // console.log("图片list:",this.imgList);
                        // console.log("### timeStrap:   ",imgE.path[0].timeStrapE);
                        // console.log("### H:   ",imgE.path[0].height);
                        // console.log("### W:   ",imgE.path[0].width);
                        //  return {height:imgE.path[0].height,width:imgE.path[0].width};
                    },
                    /**
                     * 鼠标移出会话
                     */
                    channelBoxLeave() {
                        //暂不使用此功能
                        return false;
                        // console.log("会话移出");
                        if (this.mouseLeftMenu) {
                            window.addEventListener('contextmenu', () => {
                                this.mouseLeftMenu.closePopup(remote.getCurrentWindow())
                            });
                            this.mouseLeftMenu = false;
                        }
                    },
                    /**
                     * 鼠标覆盖会话
                     */
                    channelBoxEnter(channel) {
                        //暂不使用此功能
                        return false;
                        // console.log("会话移入",channel);
                        if (channel.id && channel.type) {
                            let cb = this.removeConversationCallBack;
                            this.mouseLeftMenu = false;
                            this.mouseLeftMenu = new Menu();
                            this.mouseLeftMenu.append(new MenuItem({
                                label: '删除会话',
                                click: function() {
                                    RongIMClient.getInstance().removeConversation(parseInt(channel.type), String(channel.id), {
                                        onSuccess: function(message) {
                                            console.log('删除成功', message);
                                            cb(message, channel)
                                        },
                                        onError: function(errorCode) {
                                            console.log('删除失败', errorCode);
                                        }
                                    });
                                }
                            }));

                            window.addEventListener('contextmenu', (e) => {
                                // console.log("## e　##: ",e);
                                // e.preventDefault();
                                this.mouseLeftMenu.popup({
                                    window: remote.getCurrentWindow()
                                })
                            }, false)


                        } else {
                            console.error("channel id is error...");
                            return false;
                        }
                    },
                    /**
                     *  再次获取通讯历史记录
                     */
                    nextGetHistoryMessage() {
                        console.log("执行")
                        let opt = {
                            id: this.socketToObj.id,
                            type: this.socketToObj.type,
                            timestap: Date.now()
                        }
                        if (this.showDatas[0] && this.showDatas[0].sentTime) {
                            opt.timestap = this.showDatas[0].sentTime;
                        }
                        if (this.msgListIsEnd) {
                            this.getHistoryMessages(opt)
                        } else {
                            this.isLoad = false;
                        }
                    },
                    handleScroll() {
                        var that = this;
                        //变量scrollTop是滚动条滚动时，距离顶部的距离
                        var htmlScroll = this.$refs.messagesContainer.scrollTop;
                        if (htmlScroll == 0) {
                            // var scrollTop = htmlScroll.scrollTop;
                            that.nextGetHistoryMessage();
                        }
                    },
                    /**
                     * 通讯历史记录 回调
                     *  @param  list Array 获取的历史消息列表
                     *  @param  hasMsg Boolen 是否还有历史消息可以获取
                     */
                    historyMessageCallBack: async function(list, isEnd, opt) {
                        console.log("历史记录: ", this.socketToObj);
                        // console.log("历史记录回调: ",isEnd,list.length,list,opt);
                        if (isEnd) {
                            this.msgListIsEnd = true;
                        } else {
                            this.msgListIsEnd = false;
                        }
                        list = JSON.parse(JSON.stringify(list));
                        let rList = [];
                        for (let i = 0; i < list.length; i++) {
                            if (!this.allMsgType[list[i].messageType]) {
                                // console.log("*****: ",list[i]);
                                continue;
                            }
                            if (list[i].content) {
                                if (list[i].content.content && list[i].messageType == 'TextMessage') {
                                    list[i].content.content = this.emojiFun({
                                        type: 'en'
                                    }, list[i].content.content);
                                }
                                if (list[i].content.user == undefined || list[i].content.user.id || list[i].content.user.name || list[i].content.user.portrait) {
                                    if (list[i].conversationType == 1) {
                                        await this.userDatabaseFun('r', [list[i].senderUserId]).then(function(res) {
                                            if (res && res[list[i].senderUserId]) {
                                                list[i].content.user = {
                                                    id: list[i].senderUserId,
                                                    name: res[list[i].senderUserId].name,
                                                    portrait: res[list[i].senderUserId].portrait
                                                }
                                            } else {
                                                list[i].content.user = {
                                                    id: list[i].senderUserId,
                                                    name: "无名英雄",
                                                    portrait: ''
                                                }
                                            }
                                        }).catch(function(err) {
                                            list[i].content.user = {
                                                id: list[i].senderUserId,
                                                name: "无名英雄",
                                                portrait: ''
                                            }
                                        })

                                    } else if (list[i].conversationType == 3) {

                                        if (list[i].messageType == 'GroupNotificationMessage') {
                                            // console.log("####: ",i);
                                            // console.log("####: ",list[i]);
                                            list[i].content.user = this.sysChannelInfo;
                                            list[i].content.content = this.emojiFun({
                                                type: 'en'
                                            }, list[i].content.message);
                                        } else {
                                            await this.userDatabaseFun('r', [list[i].senderUserId]).then(function(res) {
                                                // console.log("groupSendUser: ",i);
                                                if (res && res[list[i].senderUserId]) {
                                                    list[i].content.user = {
                                                        id: list[i].senderUserId,
                                                        name: res[list[i].senderUserId].name,
                                                        portrait: res[list[i].senderUserId].portrait
                                                    }
                                                } else {
                                                    list[i].content.user = {
                                                        id: list[i].senderUserId,
                                                        name: "无名英雄",
                                                        portrait: ''
                                                    }
                                                }
                                            }).catch(function(err) {
                                                list[i].content.user = {
                                                    id: list[i].senderUserId,
                                                    name: "无名英雄",
                                                    portrait: ''
                                                }
                                            })
                                        }
                                    } else if (list[i].conversationType == 6) {
                                        list[i].content.user = this.sysChannelInfo;
                                        if (!list[i].content.content) {

                                        }
                                    }
                                }
                                rList.push(list[i]);
                            }

                        }
                        var byteConvert = function(bytes) {
                            if (isNaN(bytes)) {
                                return '';
                            }
                            var symbols = ['b', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
                            var exp = Math.floor(Math.log(bytes) / Math.log(2));
                            if (exp < 1) {
                                exp = 0;
                            }
                            var i = Math.floor(exp / 10);
                            bytes = bytes / Math.pow(2, 10 * i);

                            if (bytes.toString().length > bytes.toFixed(2).toString().length) {
                                bytes = bytes.toFixed(2);
                            }
                            return bytes + ' ' + symbols[i];
                        };

                        // console.log("历史记录: ",rList);
                        for (let i = 0; i <= rList.length; i++) {
                            if (rList[i] && rList[i].messageType && rList[i].messageType == 'FileMessage') {
                                rList[i].content.size = byteConvert(rList[i].content.size);
                                if (!rList[i].content.size && !rList[i].content.name) {
                                    rList[i].content.name = ' '
                                    rList[i].content.size = '0 k'
                                }
                            }
                        }
                        var _this = this;
                        if (opt.callBackStatus == 'init') {
                            this.showDatas = rList;
                            setTimeout(function() {
                                _this.scrollBottom(1);
                            }, 200);
                        } else {
                            this.isLoad = false;
                            if (rList && rList.length > 0) {
                                this.showDatas = rList.concat(this.showDatas);
                                this.historyNum++;
                                setTimeout(function() {
                                    _this.scrollBottom();
                                    _this.isLoad = true;
                                }, 200);
                            }

                            //  console.log("##再次:  ",rList.concat(this.showDatas));
                        }
                        this.imgList = [];
                        // this.$refs.msgBox.scrollTop = this.$refs.msgBox.scrollHeight;
                        // console.log(this.$refs.msgBox);
                        var datalist = JSON.parse(JSON.stringify(this.showDatas));
                        this.showDatas = datalist.sort(function(a, b) {
                            return a.sentTime - b.sentTime;
                        });

                        var j = 0;
                        var n = 0;
                        var img = false;

                        for (let i = 0; i < datalist.length; i++) {
                            if (datalist[i].content.user.portrait == '' || typeof datalist[i].content.user.portrait == 'undefined') {
                                datalist[i].content.user.imgName = this.splitName(datalist[i].content.user.name)
                            }
                            if (datalist[i].messageType == "TextMessage" ){
                                datalist[i].content.content = this.replaceTextMsg(datalist[i].content.content); 
                            }
                            if (datalist[i].messageType == "ImageMessage" || datalist[i].messageType == "GIFMessage") {
                                img = false;
                                img = new Image();
                                datalist[i].index = j;
                                // var imgUri={}
                                if (datalist[i].messageType == "ImageMessage") {
                                    img.src = "data:image/png;base64," + datalist[i].content.content; //（图片的base64编码字符串）
                                    img.imageUri = datalist[i].content.imageUri;
                                } else {
                                    img.src = "data:image/png;base64," + datalist[i].content.localPath; //（图片的base64编码字符串）
                                    img.imageUri = datalist[i].content.remoteUrl;
                                }
                                img.timeStrapE = datalist[i].sentTime;

                                // imgUri.imageUri = datalist[i].content.imageUri;
                                img.onload = this.imgOnloadFun;
                                j++;
                                // console.log("图片对象：",imgUri);
                            }
                            if (datalist[i].messageType == "VoiceMessage") {
                                datalist[i].isPlaying = false;
                                // this.datalist[i].VoiceImg = '/images/apy.png';
                                this.$set(datalist[i], "VoiceImg", '/images/apy.png');
                                    // datalist[i].VoiceImg = "/src/renderer/assets/apy.png"
                                datalist[i].index = n;
                                n++;
                            }
                            datalist[i].isShowTime = this.compareTime(datalist[i].sentTime);
                            datalist[i].sendTimeFomat = this.format(datalist[i].sentTime,1);
                        }
                        this.showDatas = datalist;
                        //   setTimeout(function(){
                        //         _this.scrollBottom();
                        //     },200);
                        //  console.log(this.showDatas);

                    },
                    // imgOnloadFun(imgE) {
                    //     var imgList = JSON.parse(JSON.stringify(this.imgList));
                    //     imgList.push({
                    //         height: imgE.path[0].height,
                    //         width: imgE.path[0].width,
                    //         timeStrapE: imgE.path[0].timeStrapE,
                    //         imageUri: imgE.path[0].imageUri
                    //     });
                    //     this.imgList = imgList.sort(function(a, b) {
                    //             return a.timeStrapE - b.timeStrapE;
                    //         })
                    //         // console.log("图片list:",this.imgList);
                    //         // console.log("### timeStrap:   ",imgE.path[0].timeStrapE);
                    //         // console.log("### H:   ",imgE.path[0].height);
                    //         // console.log("### W:   ",imgE.path[0].width);
                    //         //  return {height:imgE.path[0].height,width:imgE.path[0].width};
                    // },
                    /**
                     *  通讯记录操作
                     */
                    doPromptInfo(prompt) {
                        console.log("## addPromptInfo:   ", prompt);
                        this.showDatas.push({
                            msg: prompt
                        })
                    },
                    myTestFunS: async function() {
                        let testId = 4642472226904947;
                        let inSertBack = false;
                        this.userDatabaseFun('', [testId]).then(function(res) {
                                console.log("ok:  ", res);
                                inSertBack = res
                            }).catch(function(err) {
                                console.log("err", err)
                            })
                            // inSertBack = await this.userDatabaseFun('r',[testId])
                        console.log("***** test *****   ", inSertBack);
                    },
                    myTestFun: async function() {
                        console.log("#### test ###");
                        //   this.$emoji.init();
                        //   console.log(this.$emoji );
                        //   let str = '';
                        //   let emSrt = this.$emoji.symbolToEmoji(str,function (eStr) {
                        //       console.log('emojiCallBack:  ',eStr);
                        //   });
                        //   return false;
                        //  this.emojiListFun();

                        return false;
                        console.log(this.showDatas);
                        console.log(this.msgListIsEnd, this.socketToObj);
                        let opt = {
                            id: this.socketToObj.id,
                            type: this.socketToObj.type,
                            timestap: Date.now()
                        }
                        if (this.showDatas[0] && this.showDatas[0].sentTime) {
                            opt.timestap = this.showDatas[0].sentTime;
                        }
                        if (this.msgListIsEnd) {
                            this.getHistoryMessages(opt)
                        }
                        return false;
                        let userList = ['4642472226904947', '4660370668228603'];
                        let groupList = [6];
                        // let testId = 4660370668228603+Date.now();
                        let testId = 4661947752018241;
                        console.log(String(testId));

                        // return false;
                        let testDb = {
                            id: String(testId),
                            name: "测试",
                            portrait: '',
                            create_time: Date.now()
                        }
                        let inSertBack = await this.$userDatabase.update({
                            id: String(testId)
                        }, testDb, {
                            upsert: true
                        });
                        console.log("***** test *****   ", inSertBack);
                        return false
                        this.$userDatabase.find(obj).then((re) => {
                            console.log("ok:  ", re);
                        }).catch((err) => {
                            console.log("err:  ", err);
                        });
                    },
                    /**
                     *  channel用户处理
                     * @param t String 'r':读(没有记录时,写入); 'w':写(强制写入); 其它:  按有效时间
                     * @param l array
                     * @param opt Object 配置参数
                     * @returns {boolean|| number}
                     */
                    userDatabaseFun: async function(t, l, opt) {
                        // console.log("channel用户  ",t,l,opt);
                        if (!l || !Array.isArray(l) || l.length < 1) {
                            console.error("channel用户处理: 列表错误");
                            return false;
                        }
                        // #####   取数据  如果没取到,更新货插入
                        let inDatabaseUserObj = {},
                            dbVilatIds = []; // 在DB中有效的数据 ,有效的id 列表
                        let needRequestUserIds = []; //需请求刷新的用户ID列表
                        let userIdList = []; // 本次处理有效用户id 列表
                        let backUsersObj = {}; // 最后返回给用户的 数据
                        let pList = []; //Promise  并发处理 数据刷新
                        for (let i in l) {
                            if (l[i])
                                userIdList.push(String(l[i]));
                        }
                        let inDbwhere = {
                            id: {
                                $in: userIdList
                            },
                        };
                        if (t !== 'r') {
                            inDbwhere.create_time = {
                                $gte: (Date.now() - parseInt(this.dbCacheExpir.user))
                            };
                        }
                        // console.log("where: ",inDbwhere);
                        // ### 根据 ID 取回数据里现有的 来判断 更新 还是 插入
                        if (t !== 'w') {
                            await this.$userDatabase.find(inDbwhere).then((res) => {
                                // console.log("********  ok: ",res);
                                if (res.length > 0) {
                                    for (let item of res) {
                                        inDatabaseUserObj[item.id] = item;
                                    }
                                    for (let i of userIdList) {
                                        if (!inDatabaseUserObj[i]) {
                                            userIdList.push(i);
                                        }
                                    }
                                } else {
                                    needRequestUserIds = JSON.parse(JSON.stringify(userIdList));
                                }
                            }).catch((e) => {
                                // console.log("********   error: ",e);
                                needRequestUserIds = JSON.parse(JSON.stringify(userIdList));
                            });
                        } else {
                            console.log("******** ref : ", userIdList);
                            needRequestUserIds = JSON.parse(JSON.stringify(userIdList));
                        }
                        // console.log("needRequestUserIds",needRequestUserIds);
                        if (needRequestUserIds.length == 0) {
                            backUsersObj = inDatabaseUserObj;
                        } else {
                            let requestUserDb = ipcRenderer.sendSync('getChannelUser', {
                                uIdList: needRequestUserIds
                            });
                            // console.log("requestUserDb",requestUserDb);
                            backUsersObj = Object.assign(inDatabaseUserObj, requestUserDb.data);
                            console.log("返回数据：%%%%%%%%%%%%", requestUserDb)
                            for (let i in requestUserDb.data) {
                                if (requestUserDb.data[i] && typeof requestUserDb.data[i] == 'object') {
                                    pList.push(this.$userDatabase.update({
                                        id: String(i)
                                    }, Object.assign(requestUserDb.data[i], {
                                        create_time: Date.now()
                                    }), {
                                        upsert: true
                                    }))
                                }
                            }

                            if (pList.length > 0) {
                                await Promise.all(pList);
                            }
                        }
                        console.log("***************：", backUsersObj);
                        return backUsersObj;
                    },
                    /**
                     *  channel群组处理
                     * @param t String 'r':读; 'w':写
                     * @param l array
                     * @param opt Object 配置参数
                     *        {isLeft:"是否刷新左侧通讯栏"}
                     * @returns {boolean|| number}
                     */
                    groupDatabaseFun: async function(t, l, opt) {
                        // console.log("group:  ",t,l,opt);
                        if (!l || !Array.isArray(l) || l.length < 1) {
                            // console.error("channel群组处理: 列表错误");
                            return false;
                        }
                        // #####   取数据  如果没取到,更新货插入
                        let inDatabaseUserObj = {},
                            dbVilatIds = []; // 在DB中有效的数据 ,有效的id 列表
                        let needRequestUserIds = []; //需请求刷新的用户ID列表
                        let userIdList = []; // 本次处理有效用户id 列表
                        let backUsersObj = {}; // 最后返回给用户的 数据
                        let pList = []; //Promise  并发处理 数据刷新
                        for (let i in l) {
                            if (l[i])
                                userIdList.push(String(l[i]));
                        }
                        let inDbwhere = {
                            id: {
                                $in: userIdList
                            },
                        };
                        if (t !== 'r') {
                            inDbwhere.create_time = {
                                $gte: (Date.now() - parseInt(this.dbCacheExpir.group))
                            };
                        }
                        // ### 根据 ID 取回数据里现有的 来判断 更新 还是 插入
                        if (t !== 'w') {
                            await this.$groupDatabase.find(inDbwhere).then((res) => {
                                // console.log("********  ok: ",res);
                                if (res.length > 0) {
                                    for (let item of res) {
                                        inDatabaseUserObj[item.id] = item;
                                    }
                                    for (let i of userIdList) {
                                        if (!inDatabaseUserObj[i]) {
                                            userIdList.push(i);
                                        }
                                    }
                                } else {
                                    needRequestUserIds = JSON.parse(JSON.stringify(userIdList));
                                }
                            }).catch((e) => {
                                // console.log("********   error: ",e);
                                needRequestUserIds = JSON.parse(JSON.stringify(userIdList));
                            });
                        } else {
                            // console.log("******** ref : ",userIdList);
                            needRequestUserIds = JSON.parse(JSON.stringify(userIdList));
                        }
                        // console.log("needRequestUserIds",needRequestUserIds);
                        if (needRequestUserIds.length == 0) {
                            backUsersObj = inDatabaseUserObj;
                        } else {
                            let requestUserDb = ipcRenderer.sendSync('getChannelGroup', {
                                uIdList: needRequestUserIds
                            });
                            backUsersObj = Object.assign(inDatabaseUserObj, requestUserDb.data);
                            for (let i in requestUserDb.data) {
                                if (requestUserDb.data[i] && typeof requestUserDb.data[i] == 'object') {
                                    pList.push(this.$groupDatabase.update({
                                        id: String(i)
                                    }, Object.assign(requestUserDb.data[i], {
                                        create_time: Date.now()
                                    }), {
                                        upsert: true
                                    }))
                                }
                            }
                            if (pList.length > 0) {
                                await Promise.all(pList);
                            }
                        }

                        return backUsersObj;
                    },

                    /**
                     * 会话删除回调
                     */
                    removeConversationCallBack(msg, channel) {
                        //  console.log(this.leftObjList);
                        // console.log("会话删除成功:  ",msg,channel);
                        if (msg === true) {
                            let index = false;
                            for (var i = 0; i < this.leftObjList.length; i++) {
                                if (channel.id == this.leftObjList[i].id && channel.type == this.leftObjList[i].type && channel.key == this.leftObjList[i].key) {
                                    index = i;
                                    break;
                                }
                            }
                            console.log("index:  ", index);
                            if (index !== false) {
                                this.leftObjList.splice(index, 1)
                            }
                        }
                    },
                    /**
                     * 鼠标移出自己发送的消息
                     */
                    msgBoxLeave() {
                        //暂不使用此功能
                        return false;
                        // console.log("消息移出");
                        // this.mouseLeftMenu = false;
                        if (this.mouseLeftMenu) {
                            window.addEventListener('contextmenu', () => {
                                this.mouseLeftMenu.closePopup(remote.getCurrentWindow())
                            })
                        }
                    },
                    msgBoxImg(e, itemIndex, idx){
                        if (typeof itemIndex != 'undefined') {
                                this.showImg = true;
                                this.initialIndex = itemIndex;
                                // alert(itemIndex);
                                this.showImageUri =JSON.parse(JSON.stringify(this.imgList[itemIndex]));
                                this.showImageUri.clientW = document.documentElement.clientWidth-10;
                               
                                // this.swiperOption.initialSlide = itemIndex;
                                // this.swiperOption.slidesPerView = this.imgList.length;
                            } else {
                                // alert("***")
                                return false;
                            }
                    },
                    msgBoxEnter(e, itemIndex, idx) {
                        //暂不使用此功能
                        var isRecallMsg = false;
                        if (e.button === 2) {
                            let index = false;
                            if (isRecallMsg) {
                                if (e.path && Array.isArray(e.path) && e.path.length > 0) {
                                    console.log(e.path)
                                    for (let i = 0; i < e.path.length; i++) {
                                        if (e.path[i + 1] && e.path[i + 1].className) {
                                            if (e.path[i + 1].className == 'mes_box me' && e.path[i].id && e.path[i].id.substr(0, 4) == 'msg_') {
                                                console.log("index: ", e.path[i].id);
                                                let arrId = e.path[i].id.split('_');
                                                index = arrId[1];
                                                // index = e.path[i].id.substr(4,e.path[i].id.length);
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                            let cb = this.sendRecallMessageCallBack;
                            let win = remote.getCurrentWindow();
                            let msg = this.showDatas[index];
                            this.mouseLeftMenu = false;
                            if (typeof itemIndex == 'undefined' || index !== false) {
                                this.mouseLeftMenu = new Menu();
                            }
                            var id = document.getElementById('msg_' + idx + '_' + itemIndex + '_sp');

                            var that = this;
                            if (id) {
                                this.mouseLeftMenu.append(new MenuItem({
                                    label: '复制',
                                    click: function() {
                                        console.log(id);
                                        var textCon = id.innerText;
                                        that.$copy(textCon, "已复制");
                                        // let range = document.createRange();
                                        //     // 传入需要选中的元素节点
                                        //     range.selectNodeContents(id);
                                        //     var selection = document.getSelection();
                                        //     console.log(id);
                                        //     console.log(range);
                                        //     console.log(range.selectNodeContents(id))
                                        //     // 清空选中的区域
                                        //     selection.removeAllRanges();
                                        //     // 添加选中区域
                                        //     selection.addRange(range);
                                        //      console.log( selection.addRange(range));
                                        //     document.execCommand('Copy');
                                    }
                                }));
                            }
                            // if(index === false){
                            //     console.error("Event 里没有合法元素");
                            //     return false;
                            // }
                            if (index !== false) {
                                this.mouseLeftMenu.append(new MenuItem({
                                    label: '撤回并删除',
                                    click: function() {
                                        RongIMClient.getInstance().sendRecallMessage(msg, {
                                            onSuccess: function(message) {
                                                // console.log('撤回成功', message);
                                                cb(message)
                                            },
                                            onError: function(errorCode) {
                                                console.log('撤回失败', errorCode);
                                            }
                                        });
                                    }
                                }));
                            } else {
                                console.error("Event 里没有合法元素");
                            }

                            // win.removeMenu();
                            // win.setMenu(this.mouseLeftMenu)
                            if (typeof itemIndex == 'undefined' || index !== false) {
                                this.mouseLeftMenu.popup();
                            }
                        } 
                        // else if (e.button === 0) {
                            //  TODO tupian
                            //接收的图片点击放大
                            // if (typeof itemIndex != 'undefined') {
                            //     this.showImg = true;
                            //     this.initialIndex = itemIndex;
                            //     this.showImageUri =JSON.parse(JSON.stringify( this.imgList[itemIndex]));
                            //     this.showImageUri.clientW = document.documentElement.clientWidth-10;
                            //     alert( this.showImg )
                            //     // this.swiperOption.initialSlide = itemIndex;
                            //     // this.swiperOption.slidesPerView = this.imgList.length;
                            // } else {
                            //     return false;
                            // }
                        // }
                        //暂不使用此功能
                        return false;
                        if (msg.senderUserId == this.selfObj.chatMemberId) {
                            // console.log("消息移入",msg);
                            let cb = this.sendRecallMessageCallBack;
                            this.mouseLeftMenu = false;
                            this.mouseLeftMenu = new Menu();
                            this.mouseLeftMenu.append(new MenuItem({
                                label: '撤回并删除',
                                click: function() {
                                    RongIMClient.getInstance().sendRecallMessage(msg, {
                                        onSuccess: function(message) {
                                            // console.log('撤回成功', message);
                                            cb(message)
                                        },
                                        onError: function(errorCode) {
                                            console.log('撤回失败', errorCode);
                                        }
                                    });
                                }
                            }));

                            window.addEventListener('contextmenu', (e) => {
                                // console.log("## e　##: ",e);
                                // e.preventDefault();
                                this.mouseLeftMenu.popup({
                                    window: remote.getCurrentWindow()
                                })
                            }, false)
                        }
                    },
                    //关闭图片
                    closeDialog() {
                        this.initialIndex = null;
                        this.showImg = false;
                    },
                    /**
                     *  撤回历史记录
                     */
                    sendRecallMessage(msg) {
                        // console.log("撤回并删除: ",msg);
                        let cb = this.sendRecallMessageCallBack;
                        RongIMClient.getInstance().sendRecallMessage(msg, {
                            onSuccess: function(message) {
                                // console.log('撤回成功', message);
                                cb(message);
                            },
                            onError: function(errorCode) {
                                console.log('撤回失败', errorCode);

                            }
                        });
                    },
                    /**
                     *  撤回历史记录回调
                     */
                    sendRecallMessageCallBack(msg) {
                        // console.log('撤回历史记录回调:  ',msg);
                        let index = false;
                        for (var i = 0; i < this.showDatas.length; i++) {
                            // console.log('撤回历史记录回调:  ',(msg.content.messageUId == this.showDatas[i].messageUId));
                            // console.log('撤回历史记录回调:  ',msg.content.messageUId);
                            // console.log('撤回历史记录回调:  ',this.showDatas[i].messageUId);
                            if (msg.content.messageUId == this.showDatas[i].messageUId) {
                                index = i;
                                break;
                            }
                        }
                        // console.log('撤回历史记录回调:  ',index);
                        if (index !== false) {
                            this.showDatas.splice(index, 1)
                        }
                    },
                    /**
                     *  表情包列表
                     */
                    emojiListFun() {
                        this.isBiaoqing = false;
                        // document.activeElement.blur();
                        let list = this.emojiList;
                        this.biaoQingBao=true;
                        if (!list) {
                            list = RongIMLib.RongIMEmoji.list;
                            this.emojiList = list;
                        } 
                        // this.$refs.input.focus();
                        if(this.isiOS){
                            // console.log(isiOS)
                            // this.$refs.chatMsg.style.height=document.documentElement.clientHeight-this.$refs.inputBox.style.height;
                            // alert(this.$refs.chatMsg.style.height);
                            var clientH = document.documentElement.clientHeight/100;
                            // var heigH = this.$refs.inputBox.style.height;
                            // console.log(clientH);
                            // console.log(this.$refs.inputBox.style);
                            this.$refs.chatMsg.style.height=clientH - 2 +'rem';
                        }
                        if( this.isAndroid){
                            if(this.biaoQingBaoHeight){
                                let biaoqingH = this.biaoQingBaoHeight - 20;
                                this.$refs.chatMsg.style.height = biaoqingH +'px';
                            }else{
                                let clientH = document.documentElement.clientHeight/100;
                                this.$refs.chatMsg.style.height=clientH - 1 +'rem';
                            }   
                        }
                        this.scrollBottom(1);
                        //
                    },
                    //调起软键盘
                    ruanjianClick(){
                        this.isBiaoqing = true;
                        this.biaoQingBao=false;
                        this.$refs.input.focus();
                        if(this.isiOS){
                            // console.log(isiOS)
                            // this.$refs.chatMsg.style.height=document.documentElement.clientHeight-this.$refs.inputBox.style.height;
                            // alert(this.$refs.chatMsg.style.height);
                            this.$refs.chatMsg.style.height='auto'
                        }
                        if( this.isAndroid){
                            this.$refs.chatMsg.style.height='auto'
                        }
                    },
                    showMessageScrolls() {
                        // this.messageScroll = true;
                    },
                    hideMessageScrolls() {
                        // this.messageScroll = false;
                    },
                    sendMsgEnter(e) {
                        //右键粘贴
                        var that = this;
                        if (e.button === 2) {
                            this.mouseLeftMenu = false;
                            this.mouseLeftMenu = new Menu();
                            this.mouseLeftMenu.append(new MenuItem({
                                label: '复制',
                                click: function() {
                                    var id = document.getElementById('input');
                                    console.log(id);
                                    //  var textCon = id.innerText;
                                    //  that.$copy(textCon,"已复制");
                                    if (document.body.createTextRange) {
                                        let range = document.body.createTextRange();
                                        range.moveToElementText(id);
                                        range.select();
                                    } else if (window.getSelection) {
                                        let selection = window.getSelection();
                                        let range = document.createRange();
                                        range.selectNodeContents(id);
                                        selection.removeAllRanges();
                                        selection.addRange(range);
                                    } else {
                                        // alert('none');
                                    }
                                    try {
                                        document.execCommand('copy');
                                    } catch (err) {
                                        console.log('该浏览器不支持点击复制到剪贴板');
                                    }
                                    //   console.log(document.execCommand('Paste'))
                                }
                            }))
                            this.mouseLeftMenu.append(new MenuItem({
                                label: '粘贴',
                                click: function() {
                                    document.execCommand('Paste')
                                        //   console.log(document.execCommand('Paste'))
                                }
                            }))
                            this.mouseLeftMenu.popup();
                        }
                    },
                    foucsPre(){
                        this.isBiaoqing = true;
                        // alert("是否调用")
                        // this.scrollBottom(1);
                        if(this.isiOS){
                            // console.log(isiOS)
                            // this.$refs.chatMsg.style.height=document.documentElement.clientHeight-this.$refs.inputBox.style.height;
                            // alert(this.$refs.chatMsg.style.height);
                            this.$refs.chatMsg.style.height='100%'
                        }
                        if( this.isAndroid){
                            this.$refs.chatMsg.style.height='100%'
                        }
                     
                    },
                    //发送消息
                    sendTextMsg(event) {
                        // console.log(event)
                        if (typeof event == 'undefined' || event.keyCode === 13) {
                            // console.log(event);
                            // if (event && event.keyCode === 13) {
                            //     event.preventDefault();
                            // }
                            // alert(this.$refs.chatMsg.clientHeight);
                            // 阻止浏览器默认换行操作
                            let ct = 3;
                            if (this.socketToObj.type == 3) {
                                ct = 3;
                            }
                            // console.log("图片路径：", this.uri, this.base64)
                            if (this.msg) {
                                let text = this.msg;
                                // console.log("文本:  ", text, this.msg);
                                // console.log("文本:  ", this.socketToObj);
                                if (!text) {
                                    return false;
                                }
                                this.sendMsg(ct,{
                                    // 发送的时候,不用 de
                                    content: text,
                                    // targetId: this.socketToObj.userId
                                    targetId:String(this.roomId)
                                }, 'TextMessage');
                            }
                            if (this.uri && this.base64) {
                                let base64Str = this.base64;
                                let uri = this.uri;
                                this.sendMsg(ct,{
                                    // 发送的时候,不用 de
                                    content: base64Str, //base64
                                    imageUri: uri, //uri
                                    targetId: String(this.roomId)
                                }, 'ImageMessage');
                            }
                            if (this.gifObj.gifDataSize && this.gifObj.height && this.gifObj.localPath && this.gifObj.remoteUrl && this.gifObj.width) {
                                let gifObj = this.gifObj;
                                gifObj.targetId = String(this.roomId);
                                this.sendMsg(ct,gifObj, 'GIFMessage');
                            }
                            //  if(this.fileObj){
                            //      let fileObj = this.fileObj;
                            //      fileObj.targetId = this.socketToObj.id;
                            //     this.sendMsg(ct,fileObj,'FileMessage');
                            //  }
                            // this.$refs.input.focus();
                        }

                    },
                    /**
                     *  发送
                     *  @param cType int 会话类型
                     *  @param mType String 消息类型 this.messageTypeArr
                     *  @param cObj  Object {content:'',targetId:''}  消息休
                     */
                    sendMsg(cType,cObj, mType) {
                        // console.log("## 发送 ## ", cType,cObj, mType);
                        // return false;
                        if (cType == 1) {
                            var conversationType = RongIMLib.ConversationType.PRIVATE;
                        } else if (cType == 3) {
                            var conversationType = RongIMLib.ConversationType.CHATROOM;
                        } else {
                            console.error("会话类型错误");
                            return false;
                        }
                        var msg = false;
                        if (mType === 'TextMessage') {
                            msg = new RongIMLib.TextMessage({
                                content: cObj.content,
                                user: this.selfObj
                            });
                        } else if (mType === 'ImageMessage') {
                            //TODO 图片锁略base64
                            //   let base64Str = '',imageUri='';
                            msg = new RongIMLib.ImageMessage({
                                content: cObj.content,
                                imageUri: cObj.imageUri,
                                user: this.selfObj
                            });
                        } else if (mType === 'GIFMessage') {
                            msg = new RongIMClient.RegisterMessage.GIFMessage({
                                gifDataSize: cObj.gifDataSize,
                                height: cObj.height,
                                localPath: cObj.localPath,
                                remoteUrl: cObj.remoteUrl,
                                width: cObj.width,
                                user: this.selfObj
                            });
                        } else if (mType === 'FileMessage') {
                            msg = new RongIMLib.FileMessage({
                                name: cObj.name,
                                size: cObj.size,
                                type: cObj.type,
                                fileUrl: cObj.fileUrl,
                                user: this.selfObj
                            });
                        } else if (mType === 'RichContentMessage') {
                            var title = '融云'; // 图文标题
                            var content = '为用户提供 IM 即时通讯和音视频通讯云服务'; // 图文内容
                            var imageUri = ''; // 上传到自己服务器的 url
                            var url = 'https://www.rongcloud.cn'; // 富文本消息点击后打开的 URL
                            msg = new RongIMLib.RichContentMessage({
                                title: title,
                                content: content,
                                imageUri: imageUri,
                                url: url,
                                user: this.selfObj
                            });
                        } else {
                            console.error("不支持的消息类型");
                            return false;
                        }
                        let targetId = cObj.targetId; // 目标 Id
                        let cb = this.sendMsgCallBack;
                        let that = this;
                      
                        RongIMClient.getInstance().sendMessage(conversationType, targetId, msg, {
                            onSuccess: function(message) {
                                // message 为发送的消息对象并且包含服务器返回的消息唯一 id 和发送消息时间戳
                                // console.log('发送文本消息成功', message);
                                cb(message)
                                if(that.isFirstSendMsg){
                                    that.joinChatRoom();
                                }
                                
                            },
                            onError: function(errorCode) {
                                that.callBackErr(errorCode);
                                // console.log('发送文本消息失败', errorCode);
                            }
                        });
                    },
                    //用户进入社群广场
                    joinChatRoom(){
                          let that =this;
                        if(this.sharedMemberId){
                            let sendData = {
                                chatRoomId:this.roomId
                               }
                            sendData.sharedMemberId = this.sharedMemberId;
                            axios.post('/chatRoom/joinChatRoom?roomId='+this.roomId,sendData).then(resp => {
                            //    console.log(resp.data)
                                if (resp.data.errorCode == 0) {
                                    // console.log(resp.data.data)
                                    that.isFirstSendMsg = false;
                                } else {
                                    // alert(resp.data.message);
                                }

                            }).catch(err => {
                                // console.log('请求失败:' + err);
                            });
                        }
                  
                     
                     },
                      //判断是否为手机号或者网址
                    replaceTextMsg(str){
                            var u = navigator.userAgent;
                            var isAndroid = u.indexOf('Android') > -1 || u.indexOf('Adr') > -1; //android终端
                            var isiOS = !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/); //ios终端
                            let returnStr = str;
                            let phoneRex = /^1[3|4|5|6|7|8|9][0-9]{9}$/g;
                            let urlRex = /((([A-Za-z]{3,9}:(?:\/\/)?)(?:[\-;:&=\+\$,\w]+@)?[A-Za-z0-9\.\-]+|(?:www\.|[\-;:&=\+\$,\w]+@)[A-Za-z0-9\.\-]+)(:\d+)?((?:\/[\+~%\/\.\w\-_]*)?\??(?:[\-\+=&;%@\.\w_]*)#?(?:[\.\!\/\\\w]*))?)/g;
                            let urlPhoneRex = /(<span.*>.*?<\/span>)|(1[3|4|5|6|7|8|9][0-9]{9})/g;
                            returnStr = returnStr.replace(urlRex,function (a) {
                                // return "<a style='color:#5671BE' href='"+a+"'>"+a+"</a>"
                                return '<span onclick="strToStr(\''+a+'\')" style="color:#5671BE">'+a+'</span>';
                            }).replace(urlPhoneRex ,function (a) {
                                if(phoneRex.test(a)){
                                  if(isiOS){
                                    return "<a style='color:#5671BE' href='tel:"+a+"' >"+a+"</a>"
                                  }else{
                                    return "<a style='color:#5671BE' onclick='strToTelrphone(\""+a+"\")' >"+a+"</a>"
                                  }
                                    
                                    // href='tel:"+a+"'
                                }else{
                                    return a;
                                }
                            });
                                return returnStr; 
                    },
                    //时间比较
                    compareTime(time){
                        this.msgCompare.push(time);
                        if(this.msgCompare.length>2){
                            //删除msgCompare的第一个对象、
                            this.msgCompare.splice(0,1);
                        }
                        // console.log("两者 比较",this.msgCompare)
                        let compareTime = this.msgCompare[1]-this.msgCompare[0];
                        // console.log("两者 比较时间差：",compareTime);
                        if(compareTime<5*60*1000){
                               return false;
                        }else{
                             return true;
                        }
                    },
                    sendMsgCallBack(msg) {
                        // console.log("发送消息:  ", msg);
                        // console.log("发消息:  ", msg.senderUserId);
                        // console.log("发送消息:  ", this.selfObj.id);
                        if (msg.messageType == 'TextMessage') {
                            this.textMessage = '';
                            msg.content.content = this.replaceTextMsg(msg.content.content);
                            msg.content.content = this.emojiFun({
                                type: 'en'
                            }, msg.content.content)
                        }
                        // else if(msg.messageType == 'GIFMessage'){
                        // }
                        // console.log("nsg转化：",msg);
                        msg.isShowTime = this.compareTime(msg.sentTime);
                        msg.sendTimeFomat=this.format(msg.sentTime,1);
                        if(msg.content.user&&msg.content.user.chatName){
                            msg.content.user.imgName = this.splitName(msg.content.user.chatName);
                        }
                        if(msg.content.user&&msg.content.user.memberSource==0||msg.content.user.memberSource==1||msg.content.user.memberSource==2){
                            msg.content.user.memberSource = msg.content.user.memberSource
                        }else{
                            msg.content.user.memberSource = '不对'
                        }
                        console.log("发送数据：",msg)
                        this.showDatas.push(msg);
                        // console.log("返回值：",this.showDatas);
                        var _this = this;
                        setTimeout(function() {
                            _this.scrollBottom(1);
                        }, 100);
                        this.msg = '';
                        let doc = document.getElementById('input') // 获取对象
                        doc.innerHTML = '';
                    },
                    /**
                     * 时间格式
                     */
                    timestampFormat: function(timestamp, type) {
                        //TODO 处理时间格式
                        let tStr = timestamp;
                        return tStr
                    },
                    changeFace(obj) {
                        //添加表情
                        let msg = document.getElementById('input') // 获取对象
                        msg.innerHTML += obj.emoji;
                        this.msg += obj.emoji;
                    },
                    changeBlur() {
                        // 软键盘关闭
                        // this.closeRuanpan();
                    },
                    // 监听发送内容变化
                    inputMsg(e) {
                        let msgCon = e.target.innerText;
                        // console.log("输入信息：", msgCon);         
                        this.msg = msgCon.replace(/^\s*|\s*$/g, '');
                        //    setTimeout(function(){
                        //     var scrollHeight = document.documentElement.scrollTop || document.body.scrollTop || 0;
                        //     window.scrollTo(0, Math.max(scrollHeight - 1, 0));
                        //      }, 100);
                              
                    },
                    configType() {
                        var that = this;
                         // 图片类型
                        var fileType = RongIMLib.FileType.IMAGE;
                        var config = {
                            domain: 'https://upload.qiniu.com',
                            fileType: fileType,
                            getToken: function(callback) {
                                RongIMClient.getInstance().getFileToken(fileType, {
                                    onSuccess: function(data) {
                                        callback(data.token);
                                    },
                                    onError: function() {
                                        that.callBackErr(errorCode);
                                        console.error('get file token error', error);
                                    }
                                });
                            }
                        };
                        return config;
                    },
                    //点击播放语音条
                    handlePlay(idx, duration, VoiceIndex) {
                        let dataList = this.showDatas;
                        // console.log(idx);
                        // console.log(VoiceIndex);
                        let audioAll = this.$refs.audio;
                        let audio = this.$refs.audio[VoiceIndex];
                        // console.log(audio);
                        if (!dataList[idx].isPlaying) {
                            let that = this;
                            document.addEventListener("WeixinJSBridgeReady", function () {
                                audio.play();
                            }, false);
                            audio.play();
                                 dataList[idx].isPlaying = true;
                                     for(let i in dataList){
                                        if(dataList[i].messageType == 'VoiceMessage'){
                                            if(i!=idx){
                                                dataList[i].isPlaying = false;
                                                if(dataList[i].senderUserId == this.selfObj.chatMemberId){
                                                that.$set(dataList[i], 'VoiceImg', '/images/voice_sentMe.png');
                                                }else{
                                                that.$set(dataList[i], 'VoiceImg', '/images/voice_sent_Other.png');
                                                }
                                            }
                                        }
                                     }
                                     for(let i in this.$refs.audio){
                                             if(i!=VoiceIndex){
                                                this.$refs.audio[i].pause();
                                             }
                                     }
                                     if(dataList[idx].senderUserId == this.selfObj.chatMemberId){
                                        that.$set(dataList[idx], 'VoiceImg', '/images/voice_sentMe.gif');
                                     }else{
                                        that.$set(dataList[idx], 'VoiceImg', '/images/voice_sent_Other.gif');
                                     }
                                
                                 that.watchEnd(dataList,idx, duration);
                            // });
                            console.log(this.showDatas[idx])
                        } else {
                            audio.pause();
                            if(dataList[idx].senderUserId == this.selfObj.chatMemberId){
                                that.$set(dataList[idx], 'VoiceImg', '/images/voice_sentMe.png');
                            }else{
                                that.$set(dataList[idx], 'VoiceImg', '/images/voice_sent_Other.png');
                            }
                            clearTimeout(this.timer);
                            dataList[idx].isPlaying = false;
                            audio.currentTime = 0;
                        }
                           this.showDatas = dataList;
                    },
                    watchEnd(datalist,idx, duration) {
                        let that = this;
                        this.timer = setTimeout(() => {
                            datalist[idx].isPlaying = false;
                            if(datalist[idx].senderUserId == this.selfObj.chatMemberId){
                                that.$set(datalist[idx], 'VoiceImg', '/images/voice_sentMe.png');
                            }else{
                                that.$set(datalist[idx], 'VoiceImg', '/images/voice_sent_Other.png');
                            }
                                that.showDatas = datalist;
                        }, (duration) * 1000);
                        // console.log("修改图片后：",that.showDatas)
                    },
                    //获取群聊中的列表
                    getGroupMemberList() {
                        // @click.stop="isShowGroup=true"
                        var _this = this;
                        _this.isShowGroup = true;
                        console.log(parseInt(_this.socketToObj.id));
                        let groupMemberList = ipcRenderer.sendSync('getGroupMemberList', {
                            groupId: parseInt(_this.socketToObj.id),
                            pageSize: 100,
                            pageIndex: 1
                        });
                        console.log(groupMemberList);
                        if (groupMemberList.errorCode == 0) {
                            this.groupMemberList = groupMemberList.data.list;
                            var dataList = groupMemberList.data.list;
                            for (let i = 0; i < dataList.length; i++) {
                                this.groupMemberList[i].shortName = this.splitName(dataList[i].name);
                            }

                        } else {
                            this.$toast(groupMemberList.message, {
                                duration: 1500
                            })
                        }

                    }
                }
            })
               //url链接跳转
           function strToStr(link){
               if(link.substr(0,7).toLowerCase() == "http://" || link.substr(0,8).toLowerCase() == "https://"){
                    window.open(link);
               } else{
                 window.open('http://'+link);
               }
             
            }
            function strToTelrphone(tele){
                 $('.tele').css('display','block');
                 $('.centerCon').find('a').attr('href','tel:'+tele); 
                 $('#tele_a').text(tele);
            }
            function closeConfirm(){
                $('.tele').css('display','none');
            }
        }
       </script>
</body>

</html>